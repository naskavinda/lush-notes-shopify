{% comment %}
  Modern product page with image gallery, detailed info, and enhanced functionality
{% endcomment %}

<div class="product-page">
  <!-- Breadcrumb Navigation -->
  <nav class="breadcrumb">
    <a href="{{ routes.root_url }}" class="breadcrumb-item">{{ 'general.navigation.home' | t }}</a>
    <span class="breadcrumb-separator">/</span>
    <a href="{{ routes.collections_url }}" class="breadcrumb-item">{{ 'general.navigation.shop' | t }}</a>
    <span class="breadcrumb-separator">/</span>
    <span class="breadcrumb-item current">{{ product.title | capitalize }}</span>
  </nav>

  <div class="product-main">
    <!-- Product Images Gallery -->
    <div class="product-gallery">
      <div class="product-main-image">
        {% if product.featured_image %}
          <img 
            id="main-product-image"
            src="{{ product.featured_image | image_url: width: 600, height: 600 }}"
            alt="{{ product.featured_image.alt | default: product.title | escape }}"
            class="main-image"
            width="600"
            height="600"
          >
        {% endif %}
      </div>
      
      {% if product.images.size > 1 %}
        <div class="product-thumbnails">
          {% for image in product.images %}
            <button 
              class="thumbnail{% if forloop.first %} active{% endif %}"
              data-image-src="{{ image | image_url: width: 600, height: 600 }}"
              aria-label="View image {{ forloop.index }}"
            >
              <img 
                src="{{ image | image_url: width: 100, height: 100 }}"
                alt="{{ image.alt | default: product.title | escape }}"
                width="100"
                height="100"
              >
            </button>
          {% endfor %}
        </div>
      {% endif %}
    </div>

    <!-- Product Information -->
    <div class="product-info">
      <div class="product-header">
        <h1 class="product-title">
          {{ product.title | capitalize }}
          {% if product.compare_at_price > product.price %}
            <span class="discount-badge">
              {% assign discount = product.compare_at_price | minus: product.price | times: 100 | divided_by: product.compare_at_price %}
              {{ discount | round }}% OFF
            </span>
          {% endif %}
        </h1>
        
        <!-- Product Rating -->
        {% if section.settings.show_rating %}
        <div class="product-rating">
          <div class="stars">
            {% comment %} Static 5-star rating - can be made dynamic {% endcomment %}
            {% for i in (1..5) %}
              <span class="star filled">★</span>
            {% endfor %}
          </div>
          <span class="rating-text">5.0 out of 5</span>
        </div>
        {% endif %}
      </div>

      <!-- Pricing -->
      <div class="product-pricing">
        <span class="current-price">{{ product.price | money }}</span>
        {% if product.compare_at_price > product.price %}
          <span class="original-price">{{ product.compare_at_price | money }}</span>
          <span class="savings">Save {{ product.compare_at_price | minus: product.price | money }}</span>
        {% endif %}
      </div>

      <!-- Product Form -->
      {% form 'product', product, class: 'product-form' %}
        {% assign current_variant = product.selected_or_first_available_variant %}
        
        <!-- Size Selection -->
        {% unless product.has_only_default_variant %}
          <div class="size-selection">
            <label for="variant-select" class="size-label">{{ 'products.product.size' | t }}</label>
            <div class="custom-select-wrapper">
              <select id="variant-select" name="id" class="variant-select">
                {% for variant in product.variants %}
                  <option
                    value="{{ variant.id }}"
                    {% if variant == current_variant %}selected="selected"{% endif %}
                    data-available="{{ variant.available }}"
                    data-price="{{ variant.price }}"
                    data-compare-at-price="{{ variant.compare_at_price | default: 0 }}"
                    data-price-formatted="{{ variant.price | money }}"
                    data-compare-at-price-formatted="{{ variant.compare_at_price | money }}"
                  >
                    {{ variant.title }} - {{ variant.price | money }}{% unless variant.available %} ({{ 'products.product.out_of_stock' | t }}){% endunless %}
                  </option>
                {% endfor %}
              </select>
              <svg class="select-arrow" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
            </div>
          </div>
        {% else %}
          <input type="hidden" name="id" value="{{ current_variant.id }}">
        {% endunless %}

        <!-- Quantity and Actions -->
        <div class="quantity-actions">
          <div class="quantity-selector">
            <button type="button" class="quantity-btn quantity-minus" aria-label="Decrease quantity">−</button>
            <input type="number" name="quantity" value="1" min="1" class="quantity-input" aria-label="Quantity">
            <button type="button" class="quantity-btn quantity-plus" aria-label="Increase quantity">+</button>
          </div>
          
          <button type="button" class="wishlist-btn" data-product-id="{{ product.id }}" aria-label="{{ 'products.product.add_to_wishlist' | t }}">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
            </svg>
          </button>
          
          <button type="button" class="share-btn" aria-label="{{ 'products.product.share' | t }}">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="18" cy="5" r="3"/>
              <circle cx="6" cy="12" r="3"/>
              <circle cx="18" cy="19" r="3"/>
              <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"/>
              <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"/>
            </svg>
          </button>
        </div>

        <!-- Add to Cart Button -->
        <button type="submit" class="add-to-cart-btn" {% unless current_variant.available %}disabled{% endunless %}>
          {% if current_variant.available %}
            {{ 'products.product.add_to_cart' | t }}
          {% else %}
            {{ 'products.product.sold_out' | t }}
          {% endif %}
        </button>
      {% endform %}

      <!-- Trust Badges -->
      {% if section.settings.show_trust_badges %}
      <div class="trust-badges">
        <div class="trust-item">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
          </svg>
          <span>{{ 'products.product.return_policy' | t: weeks: settings.return_weeks | default: 2 }}</span>
        </div>
        
        <div class="trust-item">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
            <circle cx="12" cy="16" r="1"/>
            <path d="m7 11V7a5 5 0 0 1 10 0v4"/>
          </svg>
          <span>{{ 'products.product.secure_payment' | t }}</span>
        </div>
      </div>
      {% endif %}

      <!-- Pickup Information -->
      {% if section.settings.show_pickup_availability %}
        <div class="pickup-info">
          <div class="pickup-icon">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/>
              <circle cx="12" cy="10" r="3"/>
            </svg>
          </div>
          <div class="pickup-details">
            <p class="pickup-title">{{ 'products.product.pickup_available' | t: location: section.settings.pickup_location }}</p>
            <p class="pickup-time">{{ 'products.product.pickup_time' | t }}</p>
          </div>
        </div>
      {% endif %}
    </div>
  </div>

  <!-- People Also Bought Section -->
  {% if section.settings.show_people_also_bought %}
    <div class="people-also-bought">
      <div class="people-also-bought__container">
        <h2 class="people-also-bought__title">{{ 'products.product.people_also_bought' | t }}</h2>
        
        <div class="people-also-bought__products">
          {% comment %}
            Get products from the same collections as the current product
            We'll combine products from all collections the current product belongs to
          {% endcomment %}
          
          {% assign related_products = blank %}
          {% assign collected_products = blank %}
          
          {% comment %} Collect products from all collections this product belongs to {% endcomment %}
          {% for collection in product.collections limit: 3 %}
            {% for related_product in collection.products limit: 12 %}
              {% unless related_product.id == product.id %}
                {% unless collected_products contains related_product.id %}
                  {% assign collected_products = collected_products | append: related_product.id | append: ',' %}
                  {% assign related_products = related_products | append: related_product.id | append: ',' %}
                {% endunless %}
              {% endunless %}
            {% endfor %}
          {% endfor %}
          
          {% comment %} Convert the string back to array and limit results {% endcomment %}
          {% assign product_ids = related_products | split: ',' %}
          {% assign products_shown = 0 %}
          
          {% for collection in product.collections limit: 3 %}
            {% if products_shown >= section.settings.people_also_bought_count %}
              {% break %}
            {% endif %}
            
            {% for related_product in collection.products %}
              {% if products_shown >= section.settings.people_also_bought_count %}
                {% break %}
              {% endif %}
              
              {% unless related_product.id == product.id %}
                <div class="people-also-bought__product-card">
                  <div class="people-also-bought__product-image">
                    <a href="{{ related_product.url }}">
                      {% if related_product.featured_image %}
                        {{ related_product.featured_image | image_url: width: 300 | image_tag: alt: related_product.title, loading: 'lazy' }}
                      {% else %}
                        <div class="people-also-bought__no-image">{{ 'products.product.no_image' | t }}</div>
                      {% endif %}
                    </a>
                    
                    <!-- Wishlist Button -->
                    <button class="people-also-bought__wishlist-btn" data-product-id="{{ related_product.id }}" data-product-handle="{{ related_product.handle }}" aria-label="Add to wishlist">
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
                      </svg>
                    </button>
                  </div>

                  <div class="people-also-bought__product-info">
                    <h3 class="people-also-bought__product-title">
                      <a href="{{ related_product.url }}">{{ related_product.title | capitalize }}</a>
                    </h3>
                    
                    <div class="people-also-bought__product-price">
                      {% if related_product.compare_at_price > related_product.price %}
                        <span class="people-also-bought__price--sale">{{ related_product.price | money }}</span>
                        <span class="people-also-bought__price--original">{{ related_product.compare_at_price | money }}</span>
                      {% else %}
                        <span class="people-also-bought__price--regular">{{ related_product.price | money }}</span>
                      {% endif %}
                    </div>

                    <!-- Quick Add to Cart -->
                    {% form 'product', related_product, class: 'people-also-bought__form' %}
                      <input type="hidden" name="id" value="{{ related_product.selected_or_first_available_variant.id }}">
                      <button type="submit" class="people-also-bought__add-btn" {% unless related_product.available %}disabled{% endunless %}>
                        {% if related_product.available %}
                          {{ 'products.product.add_to_cart' | t }}
                        {% else %}
                          {{ 'products.product.sold_out' | t }}
                        {% endif %}
                      </button>
                    {% endform %}
                  </div>
                </div>
                
                {% assign products_shown = products_shown | plus: 1 %}
              {% endunless %}
            {% endfor %}
          {% endfor %}
          
          {% comment %} If we don't have enough products from collections, fallback to all products {% endcomment %}
          {% if products_shown < section.settings.people_also_bought_count %}
            {% for fallback_product in collections.all.products limit: section.settings.people_also_bought_count %}
              {% if products_shown >= section.settings.people_also_bought_count %}
                {% break %}
              {% endif %}
              
              {% unless fallback_product.id == product.id %}
                {% unless collected_products contains fallback_product.id %}
                  <div class="people-also-bought__product-card">
                    <div class="people-also-bought__product-image">
                      <a href="{{ fallback_product.url }}">
                        {% if fallback_product.featured_image %}
                          {{ fallback_product.featured_image | image_url: width: 300 | image_tag: alt: fallback_product.title, loading: 'lazy' }}
                        {% else %}
                          <div class="people-also-bought__no-image">{{ 'products.product.no_image' | t }}</div>
                        {% endif %}
                      </a>
                      
                      <!-- Wishlist Button -->
                      <button class="people-also-bought__wishlist-btn" data-product-id="{{ fallback_product.id }}" data-product-handle="{{ fallback_product.handle }}" aria-label="Add to wishlist">
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
                        </svg>
                      </button>
                    </div>

                    <div class="people-also-bought__product-info">
                      <h3 class="people-also-bought__product-title">
                        <a href="{{ fallback_product.url }}">{{ fallback_product.title | capitalize }}</a>
                      </h3>
                      
                      <div class="people-also-bought__product-price">
                        {% if fallback_product.compare_at_price > fallback_product.price %}
                          <span class="people-also-bought__price--sale">{{ fallback_product.price | money }}</span>
                          <span class="people-also-bought__price--original">{{ fallback_product.compare_at_price | money }}</span>
                        {% else %}
                          <span class="people-also-bought__price--regular">{{ fallback_product.price | money }}</span>
                        {% endif %}
                      </div>

                      <!-- Quick Add to Cart -->
                      {% form 'product', fallback_product, class: 'people-also-bought__form' %}
                        <input type="hidden" name="id" value="{{ fallback_product.selected_or_first_available_variant.id }}">
                        <button type="submit" class="people-also-bought__add-btn" {% unless fallback_product.available %}disabled{% endunless %}>
                          {% if fallback_product.available %}
                            {{ 'products.product.add_to_cart' | t }}
                          {% else %}
                            {{ 'products.product.sold_out' | t }}
                          {% endif %}
                        </button>
                      {% endform %}
                    </div>
                  </div>
                  
                  {% assign products_shown = products_shown | plus: 1 %}
                {% endunless %}
              {% endunless %}
            {% endfor %}
          {% endif %}
        </div>
      </div>
    </div>
  {% endif %}
</div>


    



<script>
  // Product page functionality
  function initProductPage() {
    console.log('🛍️ Initializing product page functionality...');
    
    // Image gallery functionality
    const mainImage = document.getElementById('main-product-image');
    const thumbnails = document.querySelectorAll('.thumbnail');
    
    thumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', function() {
        const newImageSrc = this.dataset.imageSrc;
        if (mainImage && newImageSrc) {
          mainImage.src = newImageSrc;
          
          // Update active thumbnail
          thumbnails.forEach(thumb => thumb.classList.remove('active'));
          this.classList.add('active');
        }
      });
    });
    
    // Quantity selector functionality
    const quantityInput = document.querySelector('.quantity-input');
    const minusBtn = document.querySelector('.quantity-minus');
    const plusBtn = document.querySelector('.quantity-plus');
    
    if (quantityInput && minusBtn && plusBtn) {
      minusBtn.addEventListener('click', function() {
        const currentValue = parseInt(quantityInput.value) || 1;
        if (currentValue > 1) {
          quantityInput.value = currentValue - 1;
        }
      });
      
      plusBtn.addEventListener('click', function() {
        const currentValue = parseInt(quantityInput.value) || 1;
        quantityInput.value = currentValue + 1;
      });
      
      // Ensure quantity is always at least 1
      quantityInput.addEventListener('change', function() {
        const value = parseInt(this.value) || 1;
        this.value = Math.max(1, value);
      });
    }
    
    // Variant selection functionality
    const variantSelect = document.getElementById('variant-select');
    const addToCartBtn = document.querySelector('.add-to-cart-btn');
    const currentPrice = document.querySelector('.current-price');
    const originalPrice = document.querySelector('.original-price');
    
    if (variantSelect) {
      variantSelect.addEventListener('change', function() {
        const selectedOption = this.options[this.selectedIndex];
        const isAvailable = selectedOption.dataset.available === 'true';
        const price = parseFloat(selectedOption.dataset.price);
        const compareAtPrice = parseFloat(selectedOption.dataset.compareAtPrice) || 0;
        const priceFormatted = selectedOption.dataset.priceFormatted;
        const compareAtPriceFormatted = selectedOption.dataset.compareAtPriceFormatted;
        
        // Update add to cart button
        if (addToCartBtn) {
          addToCartBtn.disabled = !isAvailable;
          addToCartBtn.textContent = isAvailable ? 'Add to Cart' : 'Out of Stock';
        }
        
        // Update pricing display
        if (currentPrice) {
          currentPrice.textContent = priceFormatted;
        }
        
        // Handle compare at price and savings
        if (originalPrice && compareAtPrice > price) {
          originalPrice.textContent = compareAtPriceFormatted;
          originalPrice.style.display = 'inline';
          
          // Update savings if it exists
          const savingsElement = document.querySelector('.savings');
          if (savingsElement) {
            const savings = compareAtPrice - price;
            // Format savings to match Shopify's money format (assuming price is in minor units)
            const savingsFormatted = `Rs ${(savings / 100).toFixed(2)}`;
            savingsElement.textContent = `Save ${savingsFormatted}`;
            savingsElement.style.display = 'inline';
          }
        } else {
          // Hide compare at price and savings if not applicable
          if (originalPrice) originalPrice.style.display = 'none';
          const savingsElement = document.querySelector('.savings');
          if (savingsElement) savingsElement.style.display = 'none';
        }
        
        console.log('Variant changed:', selectedOption.text, 'Available:', isAvailable, 'Price:', priceFormatted);
      });
    }
    
    // Share functionality
    const shareBtn = document.querySelector('.share-btn');
    if (shareBtn) {
      shareBtn.addEventListener('click', function() {
        if (navigator.share) {
          navigator.share({
            title: document.title,
            url: window.location.href
          }).catch(console.error);
        } else {
          // Fallback: copy to clipboard
          navigator.clipboard.writeText(window.location.href).then(() => {
            console.log('URL copied to clipboard');
            // You could show a toast notification here
          }).catch(console.error);
        }
      });
    }
    
    // Wishlist functionality
    const wishlistBtn = document.querySelector('.wishlist-btn');
    if (wishlistBtn) {
      const productId = wishlistBtn.dataset.productId;
      const productHandle = '{{ product.handle }}'; // Get the product handle
      
      // Store both ID and handle for better compatibility
      const productData = {
        id: productId,
        handle: productHandle,
        title: '{{ product.title | escape }}',
        image: '{{ product.featured_image | image_url: width: 300 }}',
        price: {{ product.price | json }},
        compare_at_price: {{ product.compare_at_price | default: 0 | json }},
        available: {{ product.available | json }},
        variants: {{ product.variants | json }}
      };
      
      // Check if product is already in wishlist
      function isInWishlist(productId) {
        try {
          const wishlist = JSON.parse(localStorage.getItem('product-wishlist')) || [];
          return wishlist.some(item => {
            // Support both old format (just ID) and new format (object with handle)
            return (typeof item === 'string' && item === String(productId)) ||
                   (typeof item === 'object' && (item.id === String(productId) || item.handle === productHandle));
          });
        } catch (e) {
          return false;
        }
      }
      
      // Update wishlist button state
      function updateWishlistButton() {
        const inWishlist = isInWishlist(productId);
        wishlistBtn.classList.toggle('in-wishlist', inWishlist);
        wishlistBtn.setAttribute('aria-label', inWishlist ? 'Remove from wishlist' : 'Add to wishlist');
        
        // Update SVG fill
        const svg = wishlistBtn.querySelector('svg');
        if (svg) {
          svg.style.fill = inWishlist ? 'currentColor' : 'none';
        }
      }
      
      // Toggle wishlist
      wishlistBtn.addEventListener('click', function() {
        try {
          let wishlist = JSON.parse(localStorage.getItem('product-wishlist')) || [];
          
          // Check if already in wishlist and remove
          const existingIndex = wishlist.findIndex(item => {
            return (typeof item === 'string' && item === String(productId)) ||
                   (typeof item === 'object' && (item.id === String(productId) || item.handle === productHandle));
          });
          
          if (existingIndex !== -1) {
            wishlist.splice(existingIndex, 1);
            console.log('💔 Removed from wishlist:', productHandle);
          } else {
            // Add to wishlist with complete product data
            const wishlistItem = {
              id: String(productId),
              handle: productHandle,
              title: productData.title,
              image: productData.image,
              price: productData.price,
              compare_at_price: productData.compare_at_price,
              available: productData.available,
              variants: productData.variants,
              added_at: new Date().toISOString()
            };
            wishlist.push(wishlistItem);
            console.log('💖 Added to wishlist:', productHandle, wishlistItem);
          }
          
          localStorage.setItem('product-wishlist', JSON.stringify(wishlist));
          updateWishlistButton();
          
          // Dispatch custom event for other components
          window.dispatchEvent(new CustomEvent('wishlistUpdated', {
            detail: { productId, productHandle, action: existingIndex !== -1 ? 'removed' : 'added' }
          }));
          
        } catch (e) {
          console.error('Error updating wishlist:', e);
        }
      });
      
      // Initialize wishlist button state
      updateWishlistButton();
      
      // Listen for wishlist updates from other parts of the site
      window.addEventListener('wishlistUpdated', updateWishlistButton);
    }

    
    // Initialize People Also Bought wishlist functionality
    initPeopleAlsoBoughtWishlist();
    
    console.log('✨ Product page functionality initialized!');
  }
  
  // People Also Bought Wishlist functionality
  function initPeopleAlsoBoughtWishlist() {
    const wishlistButtons = document.querySelectorAll('.people-also-bought__wishlist-btn');
    
    wishlistButtons.forEach(function(button) {
      const productId = button.dataset.productId;
      const productHandle = button.dataset.productHandle;
      
      // Update button state based on wishlist
      updatePeopleAlsoBoughtWishlistButton(button, productId);
      
      // Add click handler
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        try {
          let wishlist = JSON.parse(localStorage.getItem('product-wishlist')) || [];
          
          // Check if already in wishlist
          const existingIndex = wishlist.findIndex(item => {
            return (typeof item === 'string' && item === String(productId)) ||
                   (typeof item === 'object' && (item.id === String(productId) || item.handle === productHandle));
          });
          
          if (existingIndex !== -1) {
            // Remove from wishlist
            wishlist.splice(existingIndex, 1);
            console.log('💔 Removed from wishlist:', productHandle);
          } else {
            // Add to wishlist
            const productCard = button.closest('.people-also-bought__product-card');
            const productTitle = productCard.querySelector('.people-also-bought__product-title a').textContent.trim();
            const productImage = productCard.querySelector('.people-also-bought__product-image img');
            const productPrice = productCard.querySelector('.people-also-bought__price--regular, .people-also-bought__price--sale');
            
            const wishlistItem = {
              id: String(productId),
              handle: productHandle,
              title: productTitle,
              image: productImage ? productImage.src : '',
              price: productPrice ? productPrice.textContent.trim() : '',
              added_at: new Date().toISOString()
            };
            
            wishlist.push(wishlistItem);
            console.log('💖 Added to wishlist:', productHandle, wishlistItem);
          }
          
          localStorage.setItem('product-wishlist', JSON.stringify(wishlist));
          updatePeopleAlsoBoughtWishlistButton(button, productId);
          
          // Dispatch custom event
          window.dispatchEvent(new CustomEvent('wishlistUpdated', {
            detail: { productId, productHandle, action: existingIndex !== -1 ? 'removed' : 'added' }
          }));
          
        } catch (error) {
          console.error('❌ Error updating wishlist:', error);
        }
      });
    });
  }
  
  function updatePeopleAlsoBoughtWishlistButton(button, productId) {
    try {
      const wishlist = JSON.parse(localStorage.getItem('product-wishlist')) || [];
      const inWishlist = wishlist.some(item => {
        return (typeof item === 'string' && item === String(productId)) ||
               (typeof item === 'object' && item.id === String(productId));
      });
      
      button.classList.toggle('in-wishlist', inWishlist);
      button.setAttribute('aria-label', inWishlist ? 'Remove from wishlist' : 'Add to wishlist');
      
      const svg = button.querySelector('svg');
      if (svg) {
        svg.style.fill = inWishlist ? 'currentColor' : 'none';
      }
    } catch (error) {
      console.error('❌ Error updating wishlist button:', error);
    }
  }
  
  // Listen for wishlist updates from other components
  window.addEventListener('wishlistUpdated', function() {
    const wishlistButtons = document.querySelectorAll('.people-also-bought__wishlist-btn');
    wishlistButtons.forEach(function(button) {
      const productId = button.dataset.productId;
      updatePeopleAlsoBoughtWishlistButton(button, productId);
    });
  });
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initProductPage);
  } else {
    initProductPage();
  }
</script>

{% stylesheet %}
  .product-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  /* Breadcrumb */
  .breadcrumb {
    display: flex;
    align-items: center;
    margin-bottom: 24px;
    font-size: 14px;
  }

  .breadcrumb-item {
    color: #666;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .breadcrumb-item:hover {
    color: #ff6b35;
  }

  .breadcrumb-item.current {
    color: #333;
    font-weight: 500;
  }

  .breadcrumb-separator {
    margin: 0 8px;
    color: #999;
  }

  /* Main Product Layout */
  .product-main {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 60px;
    align-items: start;
  }

  /* Product Gallery */
  .product-gallery {
    position: sticky;
    top: 20px;
  }

  .product-main-image {
    margin-bottom: 16px;
    border-radius: 12px;
    overflow: hidden;
    background: #f8f9fa;
  }

  .main-image {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease;
  }

  .main-image:hover {
    transform: scale(1.02);
  }

  .product-thumbnails {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
  }

  .thumbnail {
    width: 80px;
    height: 80px;
    border: 2px solid transparent;
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.3s ease;
    background: none;
    padding: 0;
  }

  .thumbnail:hover,
  .thumbnail.active {
    border-color: #ff6b35;
    transform: translateY(-2px);
  }

  .thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  /* Product Info */
  .product-info {
    padding: 20px 0;
  }

  .product-header {
    margin-bottom: 24px;
  }

  .product-title {
    font-size: 28px;
    font-weight: 700;
    color: #333;
    margin: 0 0 12px;
    display: flex;
    align-items: center;
    gap: 12px;
    flex-wrap: wrap;
  }

  .discount-badge {
    background: #e74c3c;
    color: white;
    font-size: 12px;
    font-weight: 600;
    padding: 4px 8px;
    border-radius: 4px;
    text-transform: uppercase;
  }

  .product-rating {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 16px;
  }

  .stars {
    display: flex;
    gap: 2px;
  }

  .star {
    color: #ffd700;
    font-size: 16px;
  }

  .rating-text {
    font-size: 14px;
    color: #666;
  }

  .product-pricing {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 32px;
    flex-wrap: wrap;
  }

  .current-price {
    font-size: 24px;
    font-weight: 700;
    color: #333;
  }

  .original-price {
    font-size: 18px;
    color: #999;
    text-decoration: line-through;
  }

  .savings {
    background: #d4edda;
    color: #155724;
    font-size: 12px;
    font-weight: 600;
    padding: 4px 8px;
    border-radius: 4px;
  }

  /* Product Form */
  .product-form {
    margin-bottom: 32px;
  }

  .size-selection {
    margin-bottom: 24px;
  }

  .size-label {
    display: block;
    font-size: 16px;
    font-weight: 600;
    color: #333;
    margin-bottom: 8px;
  }

  .custom-select-wrapper {
    position: relative;
    display: inline-block;
    width: 100%;
  }

  .variant-select {
    appearance: none;
    width: 100%;
    padding: 12px 40px 12px 16px;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    background: white;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .variant-select:hover,
  .variant-select:focus {
    border-color: #ff6b35;
    outline: none;
  }

  .select-arrow {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    color: #666;
  }

  .quantity-actions {
    display: flex;
    align-items: center;
    gap: 16px;
    margin-bottom: 24px;
  }

  .quantity-selector {
    display: flex;
    align-items: center;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    overflow: hidden;
  }

  .quantity-btn {
    width: 40px;
    height: 44px;
    border: none;
    background: #f8f9fa;
    color: #333;
    font-size: 18px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .quantity-btn:hover {
    background: #ff6b35;
    color: white;
  }

  .quantity-input {
    width: 60px;
    height: 44px;
    border: none;
    text-align: center;
    font-size: 16px;
    font-weight: 500;
    background: white;
  }

  .quantity-input:focus {
    outline: none;
  }

  .wishlist-btn,
  .share-btn {
    width: 44px;
    height: 44px;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    background: white;
    color: #666;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .wishlist-btn:hover,
  .share-btn:hover {
    border-color: #ff6b35;
    color: #ff6b35;
    transform: translateY(-1px);
  }

  .wishlist-btn.in-wishlist {
    background: #ff6b35;
    color: white;
    border-color: #ff6b35;
  }

  .wishlist-btn.in-wishlist svg {
    fill: currentColor;
  }

  .add-to-cart-btn {
    width: 100%;
    padding: 16px 24px;
    background: #333;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .add-to-cart-btn:hover {
    background: #ff6b35;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);
  }

  .add-to-cart-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  /* Trust Badges */
  .trust-badges {
    margin: 24px 0;
    padding: 20px 0;
    border-top: 1px solid #e1e5e9;
    border-bottom: 1px solid #e1e5e9;
  }

  .trust-item {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 12px;
    font-size: 14px;
    color: #666;
  }

  .trust-item:last-child {
    margin-bottom: 0;
  }

  .trust-item svg {
    flex-shrink: 0;
    color: #28a745;
  }

  /* Pickup Info */
  .pickup-info {
    display: flex;
    align-items: flex-start;
    gap: 16px;
    padding: 16px;
    background: #f8f9fa;
    border-radius: 8px;
    margin-top: 20px;
  }

  .pickup-icon {
    flex-shrink: 0;
    width: 40px;
    height: 40px;
    background: #333;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .pickup-details {
    flex: 1;
  }

  .pickup-title {
    font-size: 14px;
    font-weight: 600;
    color: #333;
    margin: 0 0 4px;
  }

  .pickup-time {
    font-size: 13px;
    color: #666;
    margin: 0;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .product-page {
      padding: 16px;
    }

    .product-main {
      grid-template-columns: 1fr;
      gap: 32px;
    }

    .product-gallery {
      position: static;
    }

    .product-title {
      font-size: 24px;
      flex-direction: column;
      align-items: flex-start;
    }

    .current-price {
      font-size: 20px;
    }

    .quantity-actions {
      flex-wrap: wrap;
      gap: 12px;
    }

    .wishlist-btn,
    .share-btn {
      width: 40px;
      height: 40px;
    }

    .breadcrumb {
      font-size: 12px;
      margin-bottom: 16px;
    }
  }

  @media (max-width: 480px) {
    .product-thumbnails {
      justify-content: center;
    }

    .thumbnail {
      width: 60px;
      height: 60px;
    }

    .quantity-actions {
      justify-content: center;
    }

    .pickup-info {
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .people-also-bought__products {
      grid-template-columns: repeat(2, 1fr) !important;
      gap: 16px !important;
    }

    .people-also-bought__product-card {
      padding: 12px !important;
    }

    .people-also-bought__product-title {
      font-size: 14px !important;
    }

    .people-also-bought__add-btn {
      font-size: 12px !important;
      padding: 8px 12px !important;
    }
  }
}

/* People Also Bought Styles */
.people-also-bought {
  margin-top: 60px;
  padding: 40px 0;
  background: #f8f9fa;
}

.people-also-bought__container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.people-also-bought__title {
  font-size: 2rem;
  font-weight: 700;
  color: #1a1a1a;
  text-align: center;
  margin: 0 0 40px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
}

.people-also-bought__products {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 24px;
  max-width: 1000px;
  margin: 0 auto;
}

.people-also-bought__product-card {
  background: white;
  border-radius: 16px;
  padding: 16px;
  transition: all 0.3s ease;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  position: relative;
}

.people-also-bought__product-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.people-also-bought__product-image {
  position: relative;
  margin-bottom: 16px;
  border-radius: 12px;
  overflow: hidden;
  aspect-ratio: 1;
}

.people-also-bought__product-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.people-also-bought__product-card:hover .people-also-bought__product-image img {
  transform: scale(1.05);
}

.people-also-bought__no-image {
  width: 100%;
  height: 100%;
  background: #f1f3f4;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #666;
  font-size: 14px;
}

.people-also-bought__wishlist-btn {
  position: absolute;
  top: 12px;
  right: 12px;
  width: 36px;
  height: 36px;
  background: rgba(255, 255, 255, 0.9);
  border: none;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #666;
  backdrop-filter: blur(10px);
}

.people-also-bought__wishlist-btn:hover {
  background: #ff6b35;
  color: white;
  transform: scale(1.1);
}

.people-also-bought__wishlist-btn.in-wishlist {
  background: #ff6b35;
  color: white;
}

.people-also-bought__wishlist-btn.in-wishlist svg {
  fill: currentColor;
}

.people-also-bought__product-info {
  text-align: center;
}

.people-also-bought__product-title {
  margin: 0 0 12px;
  font-size: 16px;
  font-weight: 600;
  line-height: 1.4;
}

.people-also-bought__product-title a {
  color: #333;
  text-decoration: none;
  transition: color 0.3s ease;
  display: block;
}

.people-also-bought__product-title a:hover {
  color: #ff6b35;
}

.people-also-bought__product-price {
  margin-bottom: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  flex-wrap: wrap;
}

.people-also-bought__price--regular {
  font-size: 18px;
  font-weight: 700;
  color: #333;
}

.people-also-bought__price--sale {
  font-size: 18px;
  font-weight: 700;
  color: #e74c3c;
}

.people-also-bought__price--original {
  font-size: 14px;
  color: #999;
  text-decoration: line-through;
}

.people-also-bought__form {
  margin: 0;
}

.people-also-bought__add-btn {
  width: 100%;
  padding: 12px 20px;
  background: #333;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  font-family: inherit;
}

.people-also-bought__add-btn:hover {
  background: #ff6b35;
  transform: translateY(-1px);
}

.people-also-bought__add-btn:disabled {
  background: #ccc;
  cursor: not-allowed;
  transform: none;
}

.people-also-bought__add-btn:disabled:hover {
  background: #ccc;
  transform: none;
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .people-also-bought {
    margin-top: 40px;
    padding: 30px 0;
  }

  .people-also-bought__container {
    padding: 0 16px;
  }

  .people-also-bought__title {
    font-size: 1.5rem;
    margin-bottom: 24px;
  }
{% endstylesheet %}{% schema %}
{
  "name": "t:general.product",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.product.settings.pickup_info.header"
    },
    {
      "type": "checkbox",
      "id": "show_pickup_availability",
      "label": "t:sections.product.settings.show_pickup_availability.label",
      "info": "t:sections.product.settings.show_pickup_availability.info",
      "default": true
    },
    {
      "type": "text",
      "id": "pickup_location",
      "label": "t:sections.product.settings.pickup_location.label",
      "default": "Tangalle Office"
    },
    {
      "type": "header",
      "content": "t:sections.product.settings.product_info.header"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "label": "t:sections.product.settings.show_rating.label",
      "info": "t:sections.product.settings.show_rating.info",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_trust_badges",
      "label": "t:sections.product.settings.show_trust_badges.label",
      "info": "t:sections.product.settings.show_trust_badges.info",
      "default": true
    },
    {
      "type": "header",
      "content": "t:sections.product.settings.related_products.header"
    },
    {
      "type": "checkbox",
      "id": "show_related_products",
      "label": "t:sections.product.settings.show_related_products.label",
      "info": "t:sections.product.settings.show_related_products.info",
      "default": true
    },
    {
      "type": "range",
      "id": "related_products_count",
      "label": "t:sections.product.settings.related_products_count.label",
      "min": 2,
      "max": 8,
      "step": 1,
      "default": 4
    },
    {
      "type": "header",
      "content": "People Also Bought"
    },
    {
      "type": "checkbox",
      "id": "show_people_also_bought",
      "label": "Show People Also Bought section",
      "info": "Display products from the same collections as recommendations",
      "default": true
    },
    {
      "type": "range",
      "id": "people_also_bought_count",
      "label": "Number of products to show",
      "min": 2,
      "max": 8,
      "step": 1,
      "default": 4
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
