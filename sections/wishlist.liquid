{% comment %}
  Wishlist page section - displays saved products stored in localStorage
{% endcomment %}

<div class="wishlist-page">
  <!-- Page Header -->
  <div class="wishlist-header">
    <h1 class="wishlist-title">{{ 'general.wishlist.title' | t }}</h1>
    <p class="wishlist-count">
      <span id="wishlist-count">0</span> <span id="wishlist-count-text">items</span>
    </p>
  </div>

  <!-- Empty Wishlist State -->
  <div class="wishlist-empty" id="wishlist-empty" style="display: none;">
    <div class="empty-state">
      <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
        <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
      </svg>
      <h2>{{ 'general.wishlist.empty_title' | t }}</h2>
      <p>{{ 'general.wishlist.empty_description' | t }}</p>
      <a href="{{ routes.all_products_collection_url }}" class="btn btn-primary">
        {{ 'general.wishlist.start_shopping' | t }}
      </a>
    </div>
  </div>

  <!-- Wishlist Products -->
  <div class="wishlist-products" id="wishlist-products">
    <!-- Products will be dynamically loaded here -->
  </div>
</div>

{% stylesheet %}
  .wishlist-page {
    width: 100%;
    padding: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: transparent;
    min-height: auto;
  }

  .wishlist-header {
    text-align: center;
    margin-bottom: 3rem;
    padding: 4rem 2rem 2rem;
    background: transparent;
    box-shadow: none;
    border-radius: 0;
  }

  .wishlist-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    color: #333;
    background: none;
    -webkit-text-fill-color: initial;
  }

  .wishlist-count {
    color: #666;
    font-size: 1rem;
    margin: 0;
    font-weight: 400;
  }

  .wishlist-empty {
    text-align: center;
    padding: 4rem 2rem;
  }

  .empty-state svg {
    color: #ddd;
    margin-bottom: 2rem;
  }

  .empty-state h2 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: #333;
  }

  .empty-state p {
    color: #666;
    margin-bottom: 2rem;
    font-size: 1.1rem;
  }

  .wishlist-products {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
    padding: 0 2rem 4rem;
    max-width: 1400px;
    margin: 0 auto;
  }

  /* Wishlist Product Card Styles - Match your site's design */
  .wishlist-product-card {
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .wishlist-product-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .wishlist-product-card__image-wrapper {
    position: relative;
    width: 100%;
    height: 280px;
    overflow: hidden;
  }

  .wishlist-product-card__image-link {
    display: block;
    width: 100%;
    height: 100%;
  }

  .wishlist-product-card__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .wishlist-product-card__image-wrapper:hover .wishlist-product-card__image {
    transform: scale(1.05);
  }

  .wishlist-product-card__badge {
    position: absolute;
    top: 12px;
    left: 12px;
    background: #dc3545;
    color: white;
    font-size: 12px;
    font-weight: 600;
    padding: 4px 8px;
    border-radius: 4px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    z-index: 2;
  }

  .wishlist-product-card__actions {
    position: absolute;
    top: 12px;
    right: 12px;
    z-index: 2;
  }

  .wishlist-product-card__wishlist-btn {
    background: rgba(255, 255, 255, 0.9);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    color: #dc3545;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .wishlist-product-card__wishlist-btn:hover {
    background: #dc3545;
    color: white;
    transform: scale(1.1);
  }

  .wishlist-product-card__info {
    padding: 20px;
    background: white;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }

  .wishlist-product-card__title {
    font-size: 16px;
    font-weight: 600;
    margin: 0 0 12px 0;
    color: #333;
    line-height: 1.4;
    flex-grow: 1;
  }

  .wishlist-product-card__title a {
    color: inherit;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .wishlist-product-card__title a:hover {
    color: #007bff;
  }

  .wishlist-product-card__price {
    margin-bottom: 16px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .wishlist-product-card__price-current {
    font-size: 18px;
    font-weight: 700;
    color: #333;
  }

  .wishlist-product-card__price-compare {
    font-size: 14px;
    color: #999;
    text-decoration: line-through;
    font-weight: 400;
  }

  .wishlist-product-card__add-to-cart {
    background: #333;
    color: white;
    border: none;
    padding: 12px 16px;
    border-radius: 4px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    width: 100%;
  }

  .wishlist-product-card__add-to-cart:hover:not(:disabled) {
    background: #000;
    transform: translateY(-2px);
  }

  .wishlist-product-card__add-to-cart:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 500;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-primary {
    background: #ff6b35;
    color: white;
  }

  .btn-primary:hover {
    background: #e55a2b;
    transform: translateY(-1px);
  }

  /* Loading state */
  .wishlist-loading {
    text-align: center;
    padding: 4rem 2rem;
    color: #666;
  }

  .wishlist-loading svg {
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Toast notification styles */
  .wishlist-toast {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 1rem 1.5rem;
    border-radius: 6px;
    font-size: 0.9rem;
    font-weight: 500;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateX(100%);
    opacity: 0;
    transition: all 0.3s ease;
    z-index: 1000;
  }

  .wishlist-toast.success {
    background: #28a745;
    color: white;
  }

  .wishlist-toast.error {
    background: #dc3545;
    color: white;
  }

  .wishlist-toast.show {
    transform: translateX(0);
    opacity: 1;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .wishlist-page {
      padding: 1rem;
    }

    .wishlist-header {
      padding: 1.5rem;
      margin-bottom: 2rem;
    }

    .wishlist-title {
      font-size: 2.5rem;
    }

    .wishlist-products {
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 1.5rem;
      padding: 0.5rem;
    }

    .wishlist-product__info {
      padding: 1.5rem;
    }

    .wishlist-product__actions-bottom {
      flex-direction: column;
    }
  }

  @media (max-width: 480px) {
    .wishlist-products {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .wishlist-title {
      font-size: 2rem;
    }

    .wishlist-header {
      padding: 1rem;
    }
  }
{% endstylesheet %}

{% javascript %}
  class WishlistManager {
    constructor() {
      this.wishlistKey = 'product-wishlist';
      this.productsCache = new Map();
      this.loadingProducts = false;
      
      this.init();
    }

    init() {
      console.log('üöÄ Initializing wishlist page...');
      
      // Debug localStorage content
      const rawData = localStorage.getItem(this.wishlistKey);
      console.log('üîç Raw localStorage data:', rawData);
      
      const wishlist = this.getWishlist();
      console.log('üíù Current wishlist items:', wishlist);
      console.log('üíù Number of items:', wishlist.length);
      
      if (wishlist.length > 0) {
        wishlist.forEach((item, index) => {
          console.log(`üíù Item ${index + 1}:`, typeof item, item);
        });
      }
      
      this.loadWishlistProducts();
    }

    getWishlist() {
      try {
        return JSON.parse(localStorage.getItem(this.wishlistKey)) || [];
      } catch (e) {
        return [];
      }
    }

    saveWishlist(wishlist) {
      localStorage.setItem(this.wishlistKey, JSON.stringify(wishlist));
    }

    updateWishlistCount() {
      const count = this.getWishlist().length;
      const countElement = document.getElementById('wishlist-count');
      const countTextElement = document.getElementById('wishlist-count-text');
      
      if (countElement) {
        countElement.textContent = count;
      }
      
      if (countTextElement) {
        countTextElement.textContent = count === 1 ? 'item' : 'items';
      }
    }

    async loadWishlistProducts() {
      if (this.loadingProducts) return;
      this.loadingProducts = true;

      const wishlist = this.getWishlist();
      const productsContainer = document.getElementById('wishlist-products');
      const emptyState = document.getElementById('wishlist-empty');

      console.log('üîÑ Loading wishlist products...', wishlist);

      // Update count
      this.updateWishlistCount();

      if (wishlist.length === 0) {
        productsContainer.style.display = 'none';
        emptyState.style.display = 'block';
        this.loadingProducts = false;
        return;
      }

      // Show loading state
      productsContainer.innerHTML = this.getLoadingHTML();
      productsContainer.style.display = 'grid';
      emptyState.style.display = 'none';

      try {
        // Separate products that already have data vs those that need fetching
        const cachedProducts = [];
        const productsToFetch = [];

        console.log('üîÑ Processing wishlist items:', wishlist);

        wishlist.forEach((item, index) => {
          console.log(`üìã Processing item ${index + 1}:`, item);
          
          if (typeof item === 'object' && item.title) {
            // Already has product data - use it directly
            cachedProducts.push(item);
            console.log('‚úÖ Using cached product data:', item.title);
          } else {
            // Need to fetch product data
            const identifier = typeof item === 'string' ? item : (item.handle || item.id);
            if (identifier) {
              productsToFetch.push(identifier);
              console.log('üîç Will fetch product:', identifier);
            } else {
              console.warn('‚ö†Ô∏è Invalid wishlist item:', item);
            }
          }
        });

        console.log('üìä Summary - Cached:', cachedProducts.length, 'To fetch:', productsToFetch.length);

        // Fetch missing products
        let fetchedProducts = [];
        if (productsToFetch.length > 0) {
          console.log('üîç Fetching missing products:', productsToFetch);
          fetchedProducts = await this.fetchProducts(productsToFetch);
        }

        // Combine cached and fetched products
        const allProducts = [...cachedProducts, ...fetchedProducts];
        console.log('üìä Total products to render:', allProducts.length);

        if (allProducts.length > 0) {
          this.renderProducts(allProducts);
        } else {
          console.warn('‚ö†Ô∏è No products to render');
          this.renderProducts([]);
        }
      } catch (error) {
        console.error('üö® Error loading wishlist products:', error);
        productsContainer.innerHTML = `
          <div style="text-align: center; padding: 4rem 2rem; color: #666;">
            <p>Error loading wishlist products. Please try refreshing the page.</p>
            <button onclick="location.reload()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: #ff6b35; color: white; border: none; border-radius: 4px; cursor: pointer;">
              Refresh Page
            </button>
          </div>
        `;
      }

      this.loadingProducts = false;
    }

    async fetchProducts(productIds) {
      const products = [];
      
      console.log('üîç Fetching products for IDs:', productIds);
      
      // Try to fetch each product individually using product handles/IDs
      for (const productId of productIds) {
        try {
          console.log(`üîç Attempting to fetch product: "${productId}" (type: ${typeof productId})`);
          
          // Check cache first
          if (this.productsCache.has(productId)) {
            products.push(this.productsCache.get(productId));
            console.log('üìã Found product in cache:', productId);
            continue;
          }

          let product = null;

          // Method 1: Try as product handle (most common)
          console.log(`üîç Method 1 - Trying product handle: ${productId}`);
          try {
            const response = await fetch(`/products/${productId}.js`);
            if (response.ok) {
              product = await response.json();
              console.log('‚úÖ Method 1 Success - Found by handle:', product.title);
            } else {
              console.log(`üîç Method 1 - Failed with status: ${response.status}`);
            }
          } catch (e) {
            console.log(`üîç Method 1 - Error:`, e.message);
          }

          // Method 2: For numeric IDs, search through collections
          if (!product && /^\d+$/.test(productId)) {
            console.log(`üîç Method 2 - Searching collections for numeric ID: ${productId}`);
            
            try {
              const searchResponse = await fetch(`/collections/all/products.json?limit=250`);
              if (searchResponse.ok) {
                const searchData = await searchResponse.json();
                const foundProduct = searchData.products.find(p => p.id.toString() === productId.toString());
                
                if (foundProduct) {
                  product = foundProduct;
                  console.log(`‚úÖ Method 2 Success - Found by ID search: ${product.title} (handle: ${product.handle})`);
                } else {
                  console.log(`üîç Method 2 - Product ID ${productId} not found in first 250 products`);
                  
                  // Try with more products if the first batch didn't work
                  const searchResponse2 = await fetch(`/collections/all/products.json?limit=250&page=2`);
                  if (searchResponse2.ok) {
                    const searchData2 = await searchResponse2.json();
                    const foundProduct2 = searchData2.products.find(p => p.id.toString() === productId.toString());
                    if (foundProduct2) {
                      product = foundProduct2;
                      console.log(`‚úÖ Method 2b Success - Found by ID search (page 2): ${product.title}`);
                    }
                  }
                }
              }
            } catch (e) {
              console.log(`üîç Method 2 - Search failed:`, e.message);
            }
          }

          if (product) {
            console.log('‚úÖ Successfully found product:', product.title || product.handle, 'with ID:', product.id);
            this.productsCache.set(productId, product);
            products.push(product);
          } else {
            console.warn('‚ùå Product not found for ID/handle:', productId);
          }
        } catch (error) {
          console.error(`üö® Error fetching product ${productId}:`, error);
        }
      }

      console.log(`üìä Successfully loaded ${products.length} out of ${productIds.length} products`);
      return products;
    }

    renderProducts(products) {
      const productsContainer = document.getElementById('wishlist-products');
      const emptyState = document.getElementById('wishlist-empty');
      
      console.log('üé® Rendering products:', products);
      console.log('üìç Container found:', !!productsContainer);
      console.log('üìç Empty state found:', !!emptyState);
      
      if (!productsContainer) {
        console.error('‚ùå Products container not found!');
        return;
      }
      
      if (products.length === 0) {
        const wishlist = this.getWishlist();
        console.log('üìä No products to show. Wishlist has', wishlist.length, 'items');
        
        if (wishlist.length > 0) {
          // Show error message for failed product loading
          productsContainer.innerHTML = `
            <div style="text-align: center; color: #666; padding: 4rem 2rem; grid-column: 1 / -1;">
              <h3>Products Not Found</h3>
              <p>Some products in your wishlist could not be loaded. This might happen if:</p>
              <ul style="text-align: left; display: inline-block; margin: 1rem 0;">
                <li>The products have been discontinued</li>
                <li>The products are temporarily unavailable</li>
                <li>There's a connection issue</li>
              </ul>
              <div style="margin-top: 2rem;">
                <button onclick="window.wishlistManager.loadWishlistProducts()" style="margin-right: 1rem; padding: 0.75rem 1.5rem; background: #ff6b35; color: white; border: none; border-radius: 4px; cursor: pointer;">
                  Try Again
                </button>
                <button onclick="WishlistDebug.addTestProduct()" style="margin-right: 1rem; padding: 0.75rem 1.5rem; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer;">
                  Add Test Product
                </button>
                <button onclick="WishlistDebug.clearWishlist()" style="padding: 0.75rem 1.5rem; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;">
                  Clear Wishlist
                </button>
              </div>
            </div>
          `;
          productsContainer.style.display = 'grid';
          if (emptyState) emptyState.style.display = 'none';
        } else {
          // Show empty state
          productsContainer.style.display = 'none';
          if (emptyState) {
            emptyState.style.display = 'block';
          } else {
            console.warn('‚ö†Ô∏è Empty state element not found');
          }
        }
        return;
      }

      // Render products
      try {
        const productsHTML = products.map((product, index) => {
          console.log(`üé® Rendering product ${index + 1}:`, product.title || product.handle || product.id);
          return this.getProductHTML(product);
        }).join('');
        
        productsContainer.innerHTML = productsHTML;
        productsContainer.style.display = 'grid';
        if (emptyState) emptyState.style.display = 'none';

        // Bind event listeners
        this.bindProductEvents();
        
        console.log('‚úÖ Products rendered successfully!', products.length, 'products');
      } catch (error) {
        console.error('üö® Error rendering products:', error);
        productsContainer.innerHTML = `
          <div style="text-align: center; color: #d32f2f; padding: 4rem 2rem; grid-column: 1 / -1;">
            <h3>Rendering Error</h3>
            <p>There was an error displaying your wishlist products.</p>
            <pre style="background: #f5f5f5; padding: 1rem; margin: 1rem 0; text-align: left; font-size: 0.9rem;">${error.message}</pre>
            <button onclick="console.log('Products data:', ${JSON.stringify(products)})" style="margin-right: 1rem; padding: 0.75rem 1.5rem; background: #666; color: white; border: none; border-radius: 4px; cursor: pointer;">
              Debug Info
            </button>
          </div>
        `;
      }
    }

    getProductHTML(product) {
      console.log('üé® Rendering product:', product);
      
      // Handle both API response format and stored wishlist format
      let imageUrl, price, comparePrice, productHandle, productTitle, variantId, productId, available;
      
      if (product.image && !product.images) {
        // Stored wishlist format
        imageUrl = product.image;
        price = product.price || 0;
        comparePrice = product.compare_at_price;
        productHandle = product.handle;
        productTitle = product.title || 'Untitled Product';
        productId = product.id;
        available = product.available !== false;
        
        // Get first available variant ID
        if (product.variants && product.variants.length > 0) {
          const firstVariant = product.variants.find(v => v.available) || product.variants[0];
          variantId = firstVariant ? firstVariant.id : null;
        }
      } else {
        // API response format
        if (product.images && product.images.length > 0) {
          // Handle both string URLs and image objects
          const firstImage = product.images[0];
          if (typeof firstImage === 'string') {
            imageUrl = firstImage;
          } else if (firstImage && firstImage.src) {
            imageUrl = firstImage.src;
          } else {
            imageUrl = product.featured_image || '';
          }
        } else {
          imageUrl = product.featured_image || '';
        }
        
        const firstVariant = product.variants && product.variants.length > 0 ? product.variants[0] : null;
        price = firstVariant ? firstVariant.price : product.price || 0;
        comparePrice = firstVariant ? firstVariant.compare_at_price : product.compare_at_price;
        variantId = firstVariant ? firstVariant.id : null;
        productHandle = product.handle || product.id;
        productTitle = product.title || 'Untitled Product';
        productId = product.id;
        available = product.available !== false;
      }
      
      const formattedPrice = this.formatMoney(price);
      const formattedComparePrice = comparePrice && comparePrice > price ? this.formatMoney(comparePrice) : null;
      
      // Handle image URL properly
      let finalImageUrl = '';
      if (imageUrl && typeof imageUrl === 'string' && imageUrl !== '/assets/hero.png') {
        // Real product image
        if (!imageUrl.includes('?')) {
          finalImageUrl = `${imageUrl}?width=400&height=400`;
        } else {
          finalImageUrl = imageUrl;
        }
      } else {
        // Use a proper placeholder or try to fetch from product handle
        finalImageUrl = `https://via.placeholder.com/400x400/f0f0f0/999999?text=${encodeURIComponent(productTitle)}`;
      }
      
      const uniqueKey = productHandle || productId;
      
      // Calculate discount percentage if there's a compare price
      let discountPercentage = '';
      if (formattedComparePrice && comparePrice > price) {
        const discount = Math.round(((comparePrice - price) / comparePrice) * 100);
        discountPercentage = `${discount}% OFF`;
      }

      return `
        <div class="wishlist-product-card wishlist-product" data-product-id="${productId}" data-product-handle="${productHandle}">
          <div class="wishlist-product-card__image-wrapper">
            ${discountPercentage ? `<div class="wishlist-product-card__badge">${discountPercentage}</div>` : ''}
            <a href="/products/${productHandle}" class="wishlist-product-card__image-link">
              <img src="${finalImageUrl}" alt="${productTitle}" class="wishlist-product-card__image" loading="lazy" onerror="this.src='https://via.placeholder.com/400x400/f0f0f0/999999?text=${encodeURIComponent(productTitle)}'">
            </a>
            <div class="wishlist-product-card__actions">
              <button class="wishlist-product-card__wishlist-btn wishlist-product__remove" data-product-id="${productId}" data-product-handle="${productHandle}" aria-label="Remove from wishlist">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="wishlist-product-card__info">
            <h3 class="wishlist-product-card__title">
              <a href="/products/${productHandle}">${productTitle}</a>
            </h3>
            <div class="wishlist-product-card__price">
              <span class="wishlist-product-card__price-current">${formattedPrice}</span>
              ${formattedComparePrice ? `<span class="wishlist-product-card__price-compare">${formattedComparePrice}</span>` : ''}
            </div>
            <button class="wishlist-product-card__add-to-cart wishlist-add-to-cart" ${variantId && available ? `data-variant-id="${variantId}"` : 'disabled'} data-product-id="${productId}">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="9" cy="21" r="1"/>
                <circle cx="20" cy="21" r="1"/>
                <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"/>
              </svg>
              ${variantId && available ? 'Add to Cart' : 'Unavailable'}
            </button>
          </div>
        </div>
      `;
    }

    bindProductEvents() {
      // Remove from wishlist
      document.querySelectorAll('.wishlist-product-card__wishlist-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const productElement = e.target.closest('[data-product-id]');
          const productId = productElement.dataset.productId;
          const productHandle = productElement.dataset.productHandle;
          this.removeFromWishlist(productId, productHandle);
        });
      });

      // Add to cart
      document.querySelectorAll('.wishlist-product-card__add-to-cart').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const button = e.target.closest('.wishlist-product-card__add-to-cart');
          const variantId = button.dataset.variantId;
          if (variantId) {
            this.addToCart(variantId, button);
          }
        });
      });
    }

    removeFromWishlist(productId, productHandle = null) {
      let wishlist = this.getWishlist();
      
      // Filter out the product by ID or handle
      wishlist = wishlist.filter(item => {
        if (typeof item === 'string') {
          return item !== String(productId);
        } else if (typeof item === 'object') {
          return item.id !== String(productId) && (!productHandle || item.handle !== productHandle);
        }
        return true;
      });
      
      this.saveWishlist(wishlist);
      this.loadWishlistProducts();
      this.showToast('Removed from wishlist');
      
      console.log('üíî Removed from wishlist:', productId, productHandle);
    }

    async addToCart(variantId, button) {
      const originalText = button.innerHTML;
      button.disabled = true;
      button.innerHTML = `
        <svg class="checkout-spinner" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 12a9 9 0 11-6.219-8.56"/>
        </svg>
        Adding...
      `;

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: variantId,
            quantity: 1
          })
        });

        if (response.ok) {
          const cartData = await response.json();
          console.log('‚úÖ Successfully added to cart:', cartData);
          
          this.showToast('Added to cart');
          
          // Update cart count and trigger cart refresh
          this.updateCartAfterAdd();
        } else {
          throw new Error('Failed to add to cart');
        }
      } catch (error) {
        console.error('Error adding to cart:', error);
        this.showToast('Error adding to cart', 'error');
      } finally {
        button.disabled = false;
        button.innerHTML = originalText;
      }
    }

    async updateCartAfterAdd() {
      try {
        console.log('üîÑ Updating cart UI after adding item...');
        
        // Fetch current cart data
        const cartResponse = await fetch('/cart.js');
        if (cartResponse.ok) {
          const cartData = await cartResponse.json();
          console.log('üõí Current cart data:', cartData);
          
          // Method 1: Update cart count using our enhanced function
          this.updateHeaderCartCount(cartData.item_count);
          
          // Method 2: Force update using direct DOM manipulation (backup)
          setTimeout(() => {
            const cartCountElement = document.querySelector('.header__cart-count');
            if (cartCountElement) {
              cartCountElement.textContent = cartData.item_count;
              cartCountElement.style.display = cartData.item_count > 0 ? 'block' : 'none';
              console.log('üîÑ Backup cart count update applied:', cartData.item_count);
            }
          }, 100);
          
          // Method 3: Dispatch custom events for any other listeners
          document.dispatchEvent(new CustomEvent('cart:updated', { 
            detail: { cart: cartData } 
          }));
          document.dispatchEvent(new CustomEvent('cart:item-added', { 
            detail: { cart: cartData } 
          }));
          
          // Method 4: Trigger a manual page refresh of cart components
          const event = new Event('cart:refresh');
          document.dispatchEvent(event);
          
          console.log('‚úÖ Cart UI updated successfully');
        } else {
          throw new Error('Failed to fetch cart data');
        }
        
      } catch (error) {
        console.error('üö® Error updating cart UI:', error);
        // Fallback: try to refresh the page or trigger a manual update
        setTimeout(() => {
          const cartCountElement = document.querySelector('.header__cart-count');
          if (cartCountElement) {
            // Simple fallback: just make it visible and add +1 to current count
            const currentCount = parseInt(cartCountElement.textContent) || 0;
            cartCountElement.textContent = currentCount + 1;
            cartCountElement.style.display = '';
          }
        }, 100);
      }
    }

    // Helper method to update cart count - mirrors the one from cart-drawer
    updateHeaderCartCount(count) {
      console.log('üî¢ Updating header cart count to:', count);
      
      // Try multiple selectors to find the cart count element
      const selectors = [
        '.header__cart-count',
        '[data-cart-count]',
        '.cart-count',
        '.cart__count',
        '.header-cart-count',
        '.js-cart-count'
      ];
      
      let elementsFound = 0;
      selectors.forEach(selector => {
        const elements = document.querySelectorAll(selector);
        if (elements.length > 0) {
          console.log(`üéØ Found ${elements.length} elements with selector: ${selector}`);
          elementsFound += elements.length;
          
          elements.forEach(element => {
            console.log('üîß Updating element:', element);
            if (count > 0) {
              element.textContent = count;
              element.style.display = 'block';
              element.style.visibility = 'visible';
              element.style.opacity = '1';
              // Remove any hidden classes
              element.classList.remove('hidden', 'hide', 'd-none');
              console.log('‚úÖ Updated element text to:', count, element);
            } else {
              element.style.display = 'none';
              console.log('‚úÖ Hidden element (0 items)');
            }
          });
        }
      });
      
      if (elementsFound === 0) {
        console.warn('‚ö†Ô∏è No cart count elements found! Trying alternative approach...');
        
        // Alternative approach: look for the cart button and add/update count
        const cartButton = document.querySelector('.header__cart-btn, [data-cart-drawer-open], .cart-btn');
        if (cartButton) {
          console.log('üéØ Found cart button, checking for count element inside:', cartButton);
          
          let countElement = cartButton.querySelector('.header__cart-count, .cart-count');
          if (!countElement && count > 0) {
            // Create count element if it doesn't exist
            console.log('üîß Creating new cart count element');
            countElement = document.createElement('span');
            countElement.className = 'header__cart-count';
            countElement.style.cssText = `
              position: absolute;
              top: -8px;
              right: -8px;
              background: #dc3545;
              color: white;
              border-radius: 50%;
              width: 20px;
              height: 20px;
              font-size: 12px;
              font-weight: 600;
              display: flex;
              align-items: center;
              justify-content: center;
              z-index: 10;
            `;
            
            // Find the cart icon wrapper
            const iconWrapper = cartButton.querySelector('.header__cart-icon, .cart-icon');
            if (iconWrapper) {
              iconWrapper.style.position = 'relative';
              iconWrapper.appendChild(countElement);
            } else {
              cartButton.style.position = 'relative';
              cartButton.appendChild(countElement);
            }
          }
          
          if (countElement) {
            if (count > 0) {
              countElement.textContent = count;
              countElement.style.display = 'flex';
              console.log('‚úÖ Updated cart count element:', countElement);
            } else {
              countElement.style.display = 'none';
            }
          }
        } else {
          console.error('‚ùå No cart button found either!');
        }
      } else {
        console.log(`‚úÖ Successfully updated ${elementsFound} cart count elements`);
      }
    }

    getLoadingHTML() {
      return `
        <div class="wishlist-loading">
          <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 12a9 9 0 11-6.219-8.56"/>
          </svg>
          <p>Loading wishlist products...</p>
        </div>
      `;
    }

    formatMoney(cents) {
      // Handle different input formats
      if (typeof cents === 'string' && cents.includes('.')) {
        // Already formatted (e.g., "25.00")
        return `$${cents}`;
      }
      
      const amount = parseInt(cents) || 0;
      
      // Shopify typically stores prices in cents (minor units)
      // but sometimes API returns them in major units
      if (amount > 999) {
        // Likely in cents
        return `$${(amount / 100).toFixed(2)}`;
      } else {
        // Likely in dollars already
        return `$${amount.toFixed(2)}`;
      }
    }

    showToast(message, type = 'success') {
      const toast = document.createElement('div');
      toast.className = `wishlist-toast ${type}`;
      toast.textContent = message;
      
      document.body.appendChild(toast);
      
      setTimeout(() => toast.classList.add('show'), 100);
      
      setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => document.body.removeChild(toast), 300);
      }, 3000);
    }
  }

  // Initialize wishlist manager when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    console.log('üîß DOM loaded, initializing wishlist manager...');
    
    // Always initialize, but add extra debugging for wishlist page
    if (window.location.pathname.includes('wishlist')) {
      console.log('üìç On wishlist page, starting initialization...');
      
      // Debug: Check localStorage
      try {
        const wishlistData = localStorage.getItem('product-wishlist');
        console.log('üíæ Raw wishlist data from localStorage:', wishlistData);
        
        if (wishlistData) {
          const parsedWishlist = JSON.parse(wishlistData);
          console.log('‚úÖ Parsed wishlist:', parsedWishlist);
          console.log('üìä Wishlist count:', parsedWishlist.length);
          
          // Show detailed info about each item
          parsedWishlist.forEach((item, index) => {
            console.log(`üì¶ Wishlist item ${index + 1}:`, typeof item, item);
          });
        } else {
          console.log('‚ùå No wishlist data found in localStorage');
          console.log('üß™ Creating test data for debugging...');
          
          // Add some test data for debugging
          const testWishlist = [{
            id: 'test-1',
            handle: 'test-product',
            title: 'Test Product',
            image: '/assets/hero.png',
            price: 2500,
            compare_at_price: 3000,
            available: true,
            variants: [{ id: 'test-variant-1', available: true, price: 2500 }]
          }];
          
          localStorage.setItem('product-wishlist', JSON.stringify(testWishlist));
          console.log('üß™ Test data added to localStorage');
        }
      } catch (e) {
        console.error('üö® Error reading wishlist from localStorage:', e);
      }
    }
    
    // Always create the manager
    const manager = new WishlistManager();
    window.wishlistManager = manager; // Make globally available for debugging
  });

  // Add a manual refresh function for debugging
  window.refreshWishlist = function() {
    console.log('üîÑ Manual wishlist refresh triggered');
    const manager = new WishlistManager();
  };
  
  // Add a function to manually add test data
  window.addTestProduct = function() {
    const testProduct = {
      id: '12345',
      handle: 'test-product',
      title: 'Test Product',
      image: '/assets/hero.png',
      price: 2500,
      compare_at_price: 3000,
      available: true,
      variants: [{ id: 67890, available: true, price: 2500 }],
      added_at: new Date().toISOString()
    };
    
    let wishlist = JSON.parse(localStorage.getItem('product-wishlist')) || [];
    wishlist.push(testProduct);
    localStorage.setItem('product-wishlist', JSON.stringify(wishlist));
    console.log('‚úÖ Added test product to wishlist');
    if (window.wishlistManager) {
      window.wishlistManager.loadWishlistProducts();
    }
  };

  // Add a global function to force initialize wishlist manager
  window.forceInitWishlist = function() {
    console.log('üîÑ Force initializing wishlist manager...');
    try {
      const manager = new WishlistManager();
      window.wishlistManager = manager;
      console.log('‚úÖ Wishlist manager created successfully');
      return manager;
    } catch (error) {
      console.error('‚ùå Failed to create wishlist manager:', error);
      return null;
    }
  };

  // Debug utilities
  window.WishlistDebug = {
    showLocalStorage() {
      const rawData = localStorage.getItem('lush_wishlist');
      console.log('üîç localStorage data:', rawData);
      if (rawData) {
        try {
          const parsed = JSON.parse(rawData);
          console.log('üîç Parsed data:', parsed);
          return parsed;
        } catch (e) {
          console.error('üö® Parse error:', e);
          return null;
        }
      }
      return null;
    },

    clearWishlist() {
      localStorage.removeItem('lush_wishlist');
      console.log('üßπ Wishlist cleared');
      if (window.wishlistManager) {
        window.wishlistManager.loadWishlistProducts();
      }
    },

    addTestProduct() {
      // Try to add a real product from your store
      const testProductHandle = 'test-product'; // This should be a real product handle from your store
      window.addToWishlist(testProductHandle);
      console.log('‚úÖ Added test product:', testProductHandle);
    },

    testFetch(productId) {
      console.log(`üîç Testing fetch for: ${productId}`);
      fetch(`/products/${productId}.js`)
        .then(response => {
          console.log('üîç Fetch response status:', response.status);
          if (response.ok) {
            return response.json();
          } else {
            throw new Error(`HTTP ${response.status}`);
          }
        })
        .then(data => {
          console.log('üîç Fetch response data:', data);
        })
        .catch(error => {
          console.error('üîç Fetch error:', error);
        });
    },

    // Debug cart elements
    debugCartElements() {
      console.log('üîç Searching for cart elements...');
      
      const selectors = [
        '.header__cart-count',
        '[data-cart-count]',
        '.cart-count',
        '.cart__count',
        '.header-cart-count',
        '.js-cart-count',
        '.header__cart-btn',
        '[data-cart-drawer-open]',
        '.cart-btn'
      ];
      
      selectors.forEach(selector => {
        const elements = document.querySelectorAll(selector);
        if (elements.length > 0) {
          console.log(`‚úÖ Found ${elements.length} elements with "${selector}":`);
          elements.forEach((el, index) => {
            console.log(`  ${index + 1}:`, el, `Text: "${el.textContent}", Display: "${el.style.display}"`);
          });
        } else {
          console.log(`‚ùå No elements found for "${selector}"`);
        }
      });
      
      // Test manual update
      console.log('üîß Testing manual cart count update...');
      const testElement = document.querySelector('.header__cart-count');
      if (testElement) {
        const originalText = testElement.textContent;
        testElement.textContent = '‚òÖ';
        testElement.style.background = 'red';
        console.log('üéØ Cart element should now show a red star');
        setTimeout(() => {
          testElement.textContent = originalText;
          testElement.style.background = '';
          console.log('üîÑ Cart element restored');
        }, 2000);
      } else {
        console.log('‚ùå No .header__cart-count element found for testing');
      }
    },

    // Force update cart count
    forceUpdateCartCount(count = 1) {
      console.log(`üîß Force updating cart count to: ${count}`);
      if (window.wishlistManager) {
        window.wishlistManager.updateHeaderCartCount(count);
      } else {
        console.log('‚ùå Wishlist manager not found');
      }
    },

    // Get the first few products from collections to see what valid handles look like
    getValidProducts() {
      fetch('/collections/all/products.json?limit=10')
        .then(response => response.json())
        .then(data => {
          console.log('üîç Sample valid products from your store:');
          data.products.forEach(product => {
            console.log(`  - ID: ${product.id}, Handle: "${product.handle}", Title: "${product.title}"`);
          });
          console.log('üîç Try using these handles in your wishlist for testing');
          
          // Check if the problematic ID exists
          const problematicId = '10236130623669';
          const found = data.products.find(p => p.id.toString() === problematicId);
          if (found) {
            console.log(`‚úÖ Found the problematic product: ${found.title} (${found.handle})`);
          } else {
            console.log(`‚ùå Product ID ${problematicId} not found in first 10 products`);
            console.log('üîç Let me search more products...');
            return fetch('/collections/all/products.json?limit=50');
          }
        })
        .then(response => {
          if (response) {
            return response.json();
          }
        })
        .then(data => {
          if (data) {
            const problematicId = '10236130623669';
            const found = data.products.find(p => p.id.toString() === problematicId);
            if (found) {
              console.log(`‚úÖ Found the problematic product in extended search: ${found.title} (${found.handle})`);
            } else {
              console.log(`‚ùå Product ID ${problematicId} not found in first 50 products either`);
              console.log('üîç This product may be deleted, unpublished, or in a draft state');
            }
          }
        })
        .catch(error => {
          console.error('üîç Error fetching products:', error);
        });
    },

    // Force reload with different data format
    fixDataFormat() {
      console.log('üîß Attempting to fix data format...');
      const rawData = localStorage.getItem('lush_wishlist');
      if (rawData) {
        try {
          const parsed = JSON.parse(rawData);
          console.log('üîß Current data:', parsed);
          
          // Convert old format to new format if needed
          const fixed = parsed.map(item => {
            if (typeof item === 'string') {
              return item; // Keep strings as-is
            } else if (typeof item === 'object' && item.id) {
              return String(item.id); // Convert object with ID to string ID
            }
            return item;
          });
          
          localStorage.setItem('lush_wishlist', JSON.stringify(fixed));
          console.log('üîß Fixed data format:', fixed);
          
          if (window.wishlistManager) {
            window.wishlistManager.loadWishlistProducts();
          }
        } catch (e) {
          console.error('üîß Error fixing format:', e);
        }
      }
    }
  };
{% endjavascript %}

{% schema %}
{
  "name": "t:general.wishlist.title",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.wishlist.settings.header"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "t:sections.wishlist.settings.show_vendor.label",
      "default": false
    }
  ]
}
{% endschema %}