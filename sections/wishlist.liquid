{% comment %}
  Wishlist page section - displays saved products stored in localStorage
{% endcomment %}

<div class="wishlist-page">
  <!-- Page Header -->
  <div class="wishlist-header">
    <h1 class="wishlist-title">{{ 'general.wishlist.title' | t }}</h1>
    <p class="wishlist-count">
      <span id="wishlist-count">0</span> <span id="wishlist-count-text">items</span>
    </p>
  </div>

  <!-- Empty Wishlist State -->
  <div class="wishlist-empty" id="wishlist-empty" style="display: none;">
    <div class="empty-state">
      <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
        <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
      </svg>
      <h2>{{ 'general.wishlist.empty_title' | t }}</h2>
      <p>{{ 'general.wishlist.empty_description' | t }}</p>
      <a href="{{ routes.all_products_collection_url }}" class="btn btn-primary">
        {{ 'general.wishlist.start_shopping' | t }}
      </a>
    </div>
  </div>

  <!-- Wishlist Products -->
  <div class="wishlist-products" id="wishlist-products">
    <!-- Products will be dynamically loaded here -->
  </div>
</div>

{% stylesheet %}
  .wishlist-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  .wishlist-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .wishlist-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    color: #333;
  }

  .wishlist-count {
    color: #666;
    font-size: 1rem;
    margin: 0;
  }

  .wishlist-empty {
    text-align: center;
    padding: 4rem 2rem;
  }

  .empty-state svg {
    color: #ddd;
    margin-bottom: 2rem;
  }

  .empty-state h2 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: #333;
  }

  .empty-state p {
    color: #666;
    margin-bottom: 2rem;
    font-size: 1.1rem;
  }

  .wishlist-products {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
  }

  .wishlist-product {
    background: #fff;
    border: 1px solid #eee;
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    position: relative;
  }

  .wishlist-product:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  .wishlist-product__image {
    position: relative;
    aspect-ratio: 1;
    overflow: hidden;
    background: #f8f9fa;
  }

  .wishlist-product__image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .wishlist-product:hover .wishlist-product__image img {
    transform: scale(1.05);
  }

  .wishlist-product__actions {
    position: absolute;
    top: 1rem;
    right: 1rem;
    display: flex;
    gap: 0.5rem;
  }

  .wishlist-product__remove {
    background: rgba(255, 255, 255, 0.9);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    color: #666;
  }

  .wishlist-product__remove:hover {
    background: rgba(220, 53, 69, 0.9);
    color: white;
    transform: scale(1.1);
  }

  .wishlist-product__info {
    padding: 1.5rem;
  }

  .wishlist-product__title {
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    color: #333;
    line-height: 1.4;
  }

  .wishlist-product__title a {
    color: inherit;
    text-decoration: none;
  }

  .wishlist-product__title a:hover {
    color: #ff6b35;
  }

  .wishlist-product__price {
    font-size: 1.2rem;
    font-weight: 600;
    color: #ff6b35;
    margin-bottom: 1rem;
  }

  .wishlist-product__price .compare-price {
    font-size: 1rem;
    color: #999;
    text-decoration: line-through;
    margin-right: 0.5rem;
    font-weight: 400;
  }

  .wishlist-product__actions-bottom {
    display: flex;
    gap: 0.5rem;
  }

  .wishlist-add-to-cart {
    flex: 1;
    background: #ff6b35;
    color: white;
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .wishlist-add-to-cart:hover {
    background: #e55a2b;
    transform: translateY(-1px);
  }

  .wishlist-add-to-cart:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 500;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-primary {
    background: #ff6b35;
    color: white;
  }

  .btn-primary:hover {
    background: #e55a2b;
    transform: translateY(-1px);
  }

  /* Loading state */
  .wishlist-loading {
    text-align: center;
    padding: 4rem 2rem;
    color: #666;
  }

  .wishlist-loading svg {
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Toast notification styles */
  .wishlist-toast {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 1rem 1.5rem;
    border-radius: 6px;
    font-size: 0.9rem;
    font-weight: 500;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateX(100%);
    opacity: 0;
    transition: all 0.3s ease;
    z-index: 1000;
  }

  .wishlist-toast.success {
    background: #28a745;
    color: white;
  }

  .wishlist-toast.error {
    background: #dc3545;
    color: white;
  }

  .wishlist-toast.show {
    transform: translateX(0);
    opacity: 1;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .wishlist-page {
      padding: 1rem;
    }

    .wishlist-title {
      font-size: 2rem;
    }

    .wishlist-products {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1.5rem;
    }

    .wishlist-product__actions-bottom {
      flex-direction: column;
    }
  }
{% endstylesheet %}

{% javascript %}
  class WishlistManager {
    constructor() {
      this.wishlistKey = 'product-wishlist';
      this.productsCache = new Map();
      this.loadingProducts = false;
      
      this.init();
    }

    init() {
      console.log('üöÄ Initializing wishlist page...');
      const wishlist = this.getWishlist();
      console.log('üíù Current wishlist items:', wishlist);
      this.loadWishlistProducts();
    }

    getWishlist() {
      try {
        return JSON.parse(localStorage.getItem(this.wishlistKey)) || [];
      } catch (e) {
        return [];
      }
    }

    saveWishlist(wishlist) {
      localStorage.setItem(this.wishlistKey, JSON.stringify(wishlist));
    }

    updateWishlistCount() {
      const count = this.getWishlist().length;
      const countElement = document.getElementById('wishlist-count');
      const countTextElement = document.getElementById('wishlist-count-text');
      
      if (countElement) {
        countElement.textContent = count;
      }
      
      if (countTextElement) {
        countTextElement.textContent = count === 1 ? 'item' : 'items';
      }
    }

    async loadWishlistProducts() {
      if (this.loadingProducts) return;
      this.loadingProducts = true;

      const wishlist = this.getWishlist();
      const productsContainer = document.getElementById('wishlist-products');
      const emptyState = document.getElementById('wishlist-empty');

      console.log('üîÑ Loading wishlist products...', wishlist);

      // Update count
      this.updateWishlistCount();

      if (wishlist.length === 0) {
        productsContainer.style.display = 'none';
        emptyState.style.display = 'block';
        this.loadingProducts = false;
        return;
      }

      // Show loading state
      productsContainer.innerHTML = this.getLoadingHTML();
      productsContainer.style.display = 'grid';
      emptyState.style.display = 'none';

      try {
        // Separate products that already have data vs those that need fetching
        const cachedProducts = [];
        const productsToFetch = [];

        console.log('üîÑ Processing wishlist items:', wishlist);

        wishlist.forEach((item, index) => {
          console.log(`üìã Processing item ${index + 1}:`, item);
          
          if (typeof item === 'object' && item.title) {
            // Already has product data - use it directly
            cachedProducts.push(item);
            console.log('‚úÖ Using cached product data:', item.title);
          } else {
            // Need to fetch product data
            const identifier = typeof item === 'string' ? item : (item.handle || item.id);
            if (identifier) {
              productsToFetch.push(identifier);
              console.log('üîç Will fetch product:', identifier);
            } else {
              console.warn('‚ö†Ô∏è Invalid wishlist item:', item);
            }
          }
        });

        console.log('üìä Summary - Cached:', cachedProducts.length, 'To fetch:', productsToFetch.length);

        // Fetch missing products
        let fetchedProducts = [];
        if (productsToFetch.length > 0) {
          console.log('üîç Fetching missing products:', productsToFetch);
          fetchedProducts = await this.fetchProducts(productsToFetch);
        }

        // Combine cached and fetched products
        const allProducts = [...cachedProducts, ...fetchedProducts];
        console.log('üìä Total products to render:', allProducts.length);

        if (allProducts.length > 0) {
          this.renderProducts(allProducts);
        } else {
          console.warn('‚ö†Ô∏è No products to render');
          this.renderProducts([]);
        }
      } catch (error) {
        console.error('üö® Error loading wishlist products:', error);
        productsContainer.innerHTML = `
          <div style="text-align: center; padding: 4rem 2rem; color: #666;">
            <p>Error loading wishlist products. Please try refreshing the page.</p>
            <button onclick="location.reload()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: #ff6b35; color: white; border: none; border-radius: 4px; cursor: pointer;">
              Refresh Page
            </button>
          </div>
        `;
      }

      this.loadingProducts = false;
    }

    async fetchProducts(productIds) {
      const products = [];
      
      console.log('üîç Fetching products for IDs:', productIds);
      
      // Try to fetch each product individually using product handles/IDs
      for (const productId of productIds) {
        try {
          // Check cache first
          if (this.productsCache.has(productId)) {
            products.push(this.productsCache.get(productId));
            console.log('üìã Found product in cache:', productId);
            continue;
          }

          // Method 1: Try fetching as product handle first (most common storage method)
          let response = await fetch(`/products/${productId}.js`);
          
          if (!response.ok && !productId.includes('-')) {
            // Method 2: If it's a numeric ID, try direct ID access
            response = await fetch(`/products/${productId}.js`);
          }
          
          if (response.ok) {
            const product = await response.json();
            console.log('‚úÖ Successfully fetched product:', product.title || product.handle);
            this.productsCache.set(productId, product);
            products.push(product);
          } else {
            console.warn('‚ùå Product not found for ID/handle:', productId, 'Status:', response.status);
          }
        } catch (error) {
          console.error(`üö® Error fetching product ${productId}:`, error);
        }
      }

      console.log(`üìä Successfully loaded ${products.length} out of ${productIds.length} products`);
      return products;
    }

    renderProducts(products) {
      const productsContainer = document.getElementById('wishlist-products');
      const emptyState = document.getElementById('wishlist-empty');
      
      console.log('üé® Rendering products:', products);
      console.log('üìç Container found:', !!productsContainer);
      console.log('üìç Empty state found:', !!emptyState);
      
      if (!productsContainer) {
        console.error('‚ùå Products container not found!');
        return;
      }
      
      if (products.length === 0) {
        const wishlist = this.getWishlist();
        console.log('üìä No products to show. Wishlist has', wishlist.length, 'items');
        
        if (wishlist.length > 0) {
          // Show error message for failed product loading
          productsContainer.innerHTML = `
            <div style="text-align: center; color: #666; padding: 4rem 2rem; grid-column: 1 / -1;">
              <h3>Products Not Found</h3>
              <p>Some products in your wishlist could not be loaded. This might happen if:</p>
              <ul style="text-align: left; display: inline-block; margin: 1rem 0;">
                <li>The products have been discontinued</li>
                <li>The products are temporarily unavailable</li>
                <li>There's a connection issue</li>
              </ul>
              <div style="margin-top: 2rem;">
                <button onclick="window.wishlistManager.loadWishlistProducts()" style="margin-right: 1rem; padding: 0.75rem 1.5rem; background: #ff6b35; color: white; border: none; border-radius: 4px; cursor: pointer;">
                  Try Again
                </button>
                <button onclick="WishlistDebug.addTestProduct()" style="margin-right: 1rem; padding: 0.75rem 1.5rem; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer;">
                  Add Test Product
                </button>
                <button onclick="WishlistDebug.clearWishlist()" style="padding: 0.75rem 1.5rem; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;">
                  Clear Wishlist
                </button>
              </div>
            </div>
          `;
          productsContainer.style.display = 'grid';
          if (emptyState) emptyState.style.display = 'none';
        } else {
          // Show empty state
          productsContainer.style.display = 'none';
          if (emptyState) {
            emptyState.style.display = 'block';
          } else {
            console.warn('‚ö†Ô∏è Empty state element not found');
          }
        }
        return;
      }

      // Render products
      try {
        const productsHTML = products.map((product, index) => {
          console.log(`üé® Rendering product ${index + 1}:`, product.title || product.handle || product.id);
          return this.getProductHTML(product);
        }).join('');
        
        productsContainer.innerHTML = productsHTML;
        productsContainer.style.display = 'grid';
        if (emptyState) emptyState.style.display = 'none';

        // Bind event listeners
        this.bindProductEvents();
        
        console.log('‚úÖ Products rendered successfully!', products.length, 'products');
      } catch (error) {
        console.error('üö® Error rendering products:', error);
        productsContainer.innerHTML = `
          <div style="text-align: center; color: #d32f2f; padding: 4rem 2rem; grid-column: 1 / -1;">
            <h3>Rendering Error</h3>
            <p>There was an error displaying your wishlist products.</p>
            <pre style="background: #f5f5f5; padding: 1rem; margin: 1rem 0; text-align: left; font-size: 0.9rem;">${error.message}</pre>
            <button onclick="console.log('Products data:', ${JSON.stringify(products)})" style="margin-right: 1rem; padding: 0.75rem 1.5rem; background: #666; color: white; border: none; border-radius: 4px; cursor: pointer;">
              Debug Info
            </button>
          </div>
        `;
      }
    }

    getProductHTML(product) {
      console.log('üé® Rendering product:', product);
      
      // Handle both API response format and stored wishlist format
      let imageUrl, price, comparePrice, productHandle, productTitle, variantId, productId, available;
      
      if (product.image && !product.images) {
        // Stored wishlist format
        imageUrl = product.image;
        price = product.price || 0;
        comparePrice = product.compare_at_price;
        productHandle = product.handle;
        productTitle = product.title || 'Untitled Product';
        productId = product.id;
        available = product.available !== false;
        
        // Get first available variant ID
        if (product.variants && product.variants.length > 0) {
          const firstVariant = product.variants.find(v => v.available) || product.variants[0];
          variantId = firstVariant ? firstVariant.id : null;
        }
      } else {
        // API response format
        imageUrl = product.images && product.images.length > 0 ? product.images[0] : product.featured_image || '';
        const firstVariant = product.variants && product.variants.length > 0 ? product.variants[0] : null;
        price = firstVariant ? firstVariant.price : product.price || 0;
        comparePrice = firstVariant ? firstVariant.compare_at_price : product.compare_at_price;
        variantId = firstVariant ? firstVariant.id : null;
        productHandle = product.handle || product.id;
        productTitle = product.title || 'Untitled Product';
        productId = product.id;
        available = product.available !== false;
      }
      
      const formattedPrice = this.formatMoney(price);
      const formattedComparePrice = comparePrice && comparePrice > price ? this.formatMoney(comparePrice) : null;
      
      // Ensure image URL is properly formatted
      if (imageUrl && !imageUrl.includes('?')) {
        imageUrl = `${imageUrl}?width=400&height=400`;
      }
      
      const uniqueKey = productHandle || productId;
      
      return `
        <div class="wishlist-product" data-product-id="${productId}" data-product-handle="${productHandle}">
          <div class="wishlist-product__image">
            <a href="/products/${productHandle}">
              ${imageUrl ? `<img src="${imageUrl}" alt="${productTitle}" loading="lazy">` : '<div style="width:100%;height:100%;background:#f0f0f0;display:flex;align-items:center;justify-content:center;color:#999;font-size:14px;">No image</div>'}
            </a>
            <div class="wishlist-product__actions">
              <button class="wishlist-product__remove" data-product-id="${productId}" data-product-handle="${productHandle}" aria-label="Remove from wishlist">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M18 6L6 18M6 6l12 12"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="wishlist-product__info">
            <h3 class="wishlist-product__title">
              <a href="/products/${productHandle}">${productTitle}</a>
            </h3>
            <div class="wishlist-product__price">
              ${formattedComparePrice ? `<span class="compare-price">${formattedComparePrice}</span>` : ''}
              ${formattedPrice}
            </div>
            <div class="wishlist-product__actions-bottom">
              <button class="wishlist-add-to-cart" ${variantId && available ? `data-variant-id="${variantId}"` : 'disabled'} data-product-id="${productId}">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="9" cy="21" r="1"/>
                  <circle cx="20" cy="21" r="1"/>
                  <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"/>
                </svg>
                ${variantId && available ? 'Add to Cart' : 'Unavailable'}
              </button>
            </div>
          </div>
        </div>
      `;
    }

    bindProductEvents() {
      // Remove from wishlist
      document.querySelectorAll('.wishlist-product__remove').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const productElement = e.target.closest('[data-product-id]');
          const productId = productElement.dataset.productId;
          const productHandle = productElement.dataset.productHandle;
          this.removeFromWishlist(productId, productHandle);
        });
      });

      // Add to cart
      document.querySelectorAll('.wishlist-add-to-cart').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const button = e.target.closest('.wishlist-add-to-cart');
          const variantId = button.dataset.variantId;
          if (variantId) {
            this.addToCart(variantId, button);
          }
        });
      });
    }

    removeFromWishlist(productId, productHandle = null) {
      let wishlist = this.getWishlist();
      
      // Filter out the product by ID or handle
      wishlist = wishlist.filter(item => {
        if (typeof item === 'string') {
          return item !== String(productId);
        } else if (typeof item === 'object') {
          return item.id !== String(productId) && (!productHandle || item.handle !== productHandle);
        }
        return true;
      });
      
      this.saveWishlist(wishlist);
      this.loadWishlistProducts();
      this.showToast('Removed from wishlist');
      
      console.log('üíî Removed from wishlist:', productId, productHandle);
    }

    async addToCart(variantId, button) {
      const originalText = button.innerHTML;
      button.disabled = true;
      button.innerHTML = `
        <svg class="checkout-spinner" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 12a9 9 0 11-6.219-8.56"/>
        </svg>
        Adding...
      `;

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: variantId,
            quantity: 1
          })
        });

        if (response.ok) {
          this.showToast('Added to cart');
          // Optionally update cart drawer/count here
        } else {
          throw new Error('Failed to add to cart');
        }
      } catch (error) {
        console.error('Error adding to cart:', error);
        this.showToast('Error adding to cart', 'error');
      } finally {
        button.disabled = false;
        button.innerHTML = originalText;
      }
    }

    getLoadingHTML() {
      return `
        <div class="wishlist-loading">
          <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 12a9 9 0 11-6.219-8.56"/>
          </svg>
          <p>Loading wishlist products...</p>
        </div>
      `;
    }

    formatMoney(cents) {
      // Handle different input formats
      if (typeof cents === 'string' && cents.includes('.')) {
        // Already formatted (e.g., "25.00")
        return `$${cents}`;
      }
      
      const amount = parseInt(cents) || 0;
      
      // Shopify typically stores prices in cents (minor units)
      // but sometimes API returns them in major units
      if (amount > 999) {
        // Likely in cents
        return `$${(amount / 100).toFixed(2)}`;
      } else {
        // Likely in dollars already
        return `$${amount.toFixed(2)}`;
      }
    }

    showToast(message, type = 'success') {
      const toast = document.createElement('div');
      toast.className = `wishlist-toast ${type}`;
      toast.textContent = message;
      
      document.body.appendChild(toast);
      
      setTimeout(() => toast.classList.add('show'), 100);
      
      setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => document.body.removeChild(toast), 300);
      }, 3000);
    }
  }

  // Initialize wishlist manager when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    console.log('üîß DOM loaded, initializing wishlist manager...');
    
    // Always initialize, but add extra debugging for wishlist page
    if (window.location.pathname.includes('wishlist')) {
      console.log('üìç On wishlist page, starting initialization...');
      
      // Debug: Check localStorage
      try {
        const wishlistData = localStorage.getItem('product-wishlist');
        console.log('üíæ Raw wishlist data from localStorage:', wishlistData);
        
        if (wishlistData) {
          const parsedWishlist = JSON.parse(wishlistData);
          console.log('‚úÖ Parsed wishlist:', parsedWishlist);
          console.log('üìä Wishlist count:', parsedWishlist.length);
          
          // Show detailed info about each item
          parsedWishlist.forEach((item, index) => {
            console.log(`üì¶ Wishlist item ${index + 1}:`, typeof item, item);
          });
        } else {
          console.log('‚ùå No wishlist data found in localStorage');
          console.log('üß™ Creating test data for debugging...');
          
          // Add some test data for debugging
          const testWishlist = [{
            id: 'test-1',
            handle: 'test-product',
            title: 'Test Product',
            image: '/assets/hero.png',
            price: 2500,
            compare_at_price: 3000,
            available: true,
            variants: [{ id: 'test-variant-1', available: true, price: 2500 }]
          }];
          
          localStorage.setItem('product-wishlist', JSON.stringify(testWishlist));
          console.log('üß™ Test data added to localStorage');
        }
      } catch (e) {
        console.error('üö® Error reading wishlist from localStorage:', e);
      }
    }
    
    // Always create the manager
    const manager = new WishlistManager();
    window.wishlistManager = manager; // Make globally available for debugging
  });

  // Add a manual refresh function for debugging
  window.refreshWishlist = function() {
    console.log('üîÑ Manual wishlist refresh triggered');
    const manager = new WishlistManager();
  };
  
  // Add a function to manually add test data
  window.addTestProduct = function() {
    const testProduct = {
      id: '12345',
      handle: 'test-product',
      title: 'Test Product',
      image: '/assets/hero.png',
      price: 2500,
      compare_at_price: 3000,
      available: true,
      variants: [{ id: 67890, available: true, price: 2500 }],
      added_at: new Date().toISOString()
    };
    
    let wishlist = JSON.parse(localStorage.getItem('product-wishlist')) || [];
    wishlist.push(testProduct);
    localStorage.setItem('product-wishlist', JSON.stringify(wishlist));
    console.log('‚úÖ Added test product to wishlist');
    if (window.wishlistManager) {
      window.wishlistManager.loadWishlistProducts();
    }
  };

  // Add a global function to force initialize wishlist manager
  window.forceInitWishlist = function() {
    console.log('üîÑ Force initializing wishlist manager...');
    try {
      const manager = new WishlistManager();
      window.wishlistManager = manager;
      console.log('‚úÖ Wishlist manager created successfully');
      return manager;
    } catch (error) {
      console.error('‚ùå Failed to create wishlist manager:', error);
      return null;
    }
  };
{% endjavascript %}

{% schema %}
{
  "name": "t:general.wishlist.title",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.wishlist.settings.header"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "t:sections.wishlist.settings.show_vendor.label",
      "default": false
    }
  ]
}
{% endschema %}