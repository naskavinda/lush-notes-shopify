{% comment %}
  This section is used in the collection template to render collection page
  listing all products within a collection.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/collection
{% endcomment %}

<div class="collection-page">
  <div class="collection-header">
    <nav class="breadcrumb">
      <a href="{{ routes.root_url }}" class="breadcrumb-item">{{ 'general.navigation.home' | t }}</a>
      <span class="breadcrumb-separator">></span>
      <span class="breadcrumb-item current">{{ collection.title }}</span>
    </nav>
    
    <div class="collection-header-main">
      <div class="collection-title-section">
        <h1 class="collection-title">{{ collection.title }}</h1>
        {% if collection.description != blank %}
          <p class="collection-description">{{ collection.description }}</p>
        {% endif %}
      </div>
      
      <div class="collection-controls">
        {% comment %} Sort Dropdown {% endcomment %}
        {% assign show_sort = section.settings.enable_sort_dropdown | default: true %}
        {% if show_sort %}
          <div class="sort-section">
            <label for="collection-sort" class="sort-label">{{ 'sections.collection.sort.label' | t }}</label>
            <div class="sort-dropdown-wrapper">
              <select id="collection-sort" class="sort-dropdown" data-default-sort="{{ section.settings.default_sort | default: 'manual' }}">
              <option value="manual">{{ 'sections.collection.sort.options.featured' | t }}</option>
              <option value="best-selling">{{ 'sections.collection.sort.options.best_selling' | t }}</option>
              <option value="title-ascending">{{ 'sections.collection.sort.options.name_a_z' | t }}</option>
              <option value="title-descending">{{ 'sections.collection.sort.options.name_z_a' | t }}</option>
              <option value="price-ascending">{{ 'sections.collection.sort.options.price_low_high' | t }}</option>
              <option value="price-descending">{{ 'sections.collection.sort.options.price_high_low' | t }}</option>
              <option value="created-descending">{{ 'sections.collection.sort.options.date_new_old' | t }}</option>
              <option value="created-ascending">{{ 'sections.collection.sort.options.date_old_new' | t }}</option>
            </select>
            <svg class="sort-dropdown-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="6,9 12,15 18,9"></polyline>
            </svg>
          </div>
        </div>
        {% endif %}

        {% comment %} View Toggle {% endcomment %}
        {% if section.settings.enable_view_toggle %}
          <div class="view-toggle-section">
            <span class="view-toggle-label">{{ 'sections.collection.view_toggle.label' | t }}</span>
            <div class="view-toggle-buttons" data-default-view="{{ section.settings.default_view | default: 'grid' }}">
              <button 
                class="view-toggle-btn view-toggle-grid{% if section.settings.default_view == 'grid' %} active{% endif %}" 
                data-view="grid"
                aria-label="{{ 'sections.collection.view_toggle.grid' | t }}"
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="3" width="7" height="7"/>
                  <rect x="14" y="3" width="7" height="7"/>
                  <rect x="14" y="14" width="7" height="7"/>
                  <rect x="3" y="14" width="7" height="7"/>
                </svg>
                {{ 'sections.collection.view_toggle.grid' | t }}
              </button>
              <button 
                class="view-toggle-btn view-toggle-list{% if section.settings.default_view == 'list' %} active{% endif %}" 
                data-view="list"
                aria-label="{{ 'sections.collection.view_toggle.list' | t }}"
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="8" y1="6" x2="21" y2="6"/>
                  <line x1="8" y1="12" x2="21" y2="12"/>
                  <line x1="8" y1="18" x2="21" y2="18"/>
                  <line x1="3" y1="6" x2="3.01" y2="6"/>
                  <line x1="3" y1="12" x2="3.01" y2="12"/>
                  <line x1="3" y1="18" x2="3.01" y2="18"/>
                </svg>
                {{ 'sections.collection.view_toggle.list' | t }}
              </button>
            </div>
          </div>
        {% endif %}
      </div>
    </div>
  </div>

  <div 
    class="collection-products" 
    data-view="{{ section.settings.default_view }}"
    style="
      --products-per-row-desktop: {{ section.settings.products_per_row_desktop }};
      --products-per-row-tablet: {{ section.settings.products_per_row_tablet }};
      --products-per-row-mobile: {{ section.settings.products_per_row_mobile }};
    "
  >
    {% paginate collection.products by 12 %}
      {% for product in collection.products %}
        <div class="product-card" data-product-id="{{ product.id }}">
          {% if product.compare_at_price > product.price %}
            <div class="product-card__badge sale-badge">
              {% assign discount = product.compare_at_price | minus: product.price | times: 100 | divided_by: product.compare_at_price %}
              {{ discount | round }}% OFF
            </div>
          {% endif %}
          
          <div class="product-card__image-wrapper">
            {% if product.featured_image %}
              <a href="{{ product.url }}" class="product-card__image-link">
                {{ product.featured_image | image_url: width: 300, height: 300 | image_tag: 
                   alt: product.featured_image.alt | default: product.title,
                   class: 'product-card__image',
                   loading: 'lazy' }}
              </a>
            {% endif %}
            
            <button class="product-card__wishlist" data-product-id="{{ product.id }}" aria-label="{{ 'products.product.add_to_wishlist' | t }}">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
              </svg>
            </button>
          </div>

          <div class="product-card__content">
            <h3 class="product-card__title">
              <a href="{{ product.url }}">{{ product.title | escape }}</a>
            </h3>

            <!-- List view additional info -->
            <div class="product-card__list-info">
              {% if product.description != blank %}
                <p class="product-card__description">{{ product.description | strip_html | truncate: 120 }}</p>
              {% endif %}
              
              {% if product.vendor != blank %}
                <p class="product-card__vendor">{{ product.vendor }}</p>
              {% endif %}
              
              {% if product.tags.size > 0 %}
                <div class="product-card__tags">
                  {% for tag in product.tags limit: 3 %}
                    <span class="product-card__tag">{{ tag }}</span>
                  {% endfor %}
                </div>
              {% endif %}
            </div>
            
            <div class="product-card__price">
              {% if product.compare_at_price > product.price %}
                <span class="product-card__price-regular">{{ product.price | money }}</span>
                <span class="product-card__price-compare">{{ product.compare_at_price | money }}</span>
              {% else %}
                <span class="product-card__price-regular">{{ product.price | money }}</span>
              {% endif %}
            </div>

            <div class="product-card__actions">
              {% form 'product', product, class: 'product-card__form' %}
                <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                {% if product.available %}
                  <button type="submit" class="product-card__add-to-cart">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <circle cx="9" cy="21" r="1"/>
                      <circle cx="20" cy="21" r="1"/>
                      <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"/>
                    </svg>
                    {{ 'products.product.add_to_cart' | t }}
                  </button>
                {% else %}
                  <button class="product-card__add-to-cart sold-out" disabled>
                    {{ 'products.product.sold_out' | t }}
                  </button>
                {% endif %}
              {% endform %}
              
              <!-- List view wishlist button -->
              <button class="product-card__wishlist-btn" data-product-id="{{ product.id }}" aria-label="{{ 'products.product.add_to_wishlist' | t }}">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
                </svg>
                {{ 'products.product.add_to_wishlist' | t }}
              </button>
            </div>
          </div>
        </div>
      {% endfor %}

      {% if paginate.pages > 1 %}
        <div class="collection-pagination">
          <nav class="pagination-wrapper" aria-label="Pagination">
            {% if paginate.previous %}
              <a href="{{ paginate.previous.url }}" class="pagination-item pagination-prev">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="15,18 9,12 15,6"></polyline>
                </svg>
                Previous
              </a>
            {% else %}
              <span class="pagination-item pagination-prev disabled">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="15,18 9,12 15,6"></polyline>
                </svg>
                Previous
              </span>
            {% endif %}

            {% for part in paginate.parts %}
              {% if part.is_link %}
                <a href="{{ part.url }}" class="pagination-item pagination-number">{{ part.title }}</a>
              {% else %}
                {% if part.title == paginate.current_page %}
                  <span class="pagination-item pagination-number current">{{ part.title }}</span>
                {% else %}
                  <span class="pagination-item pagination-number gap">{{ part.title }}</span>
                {% endif %}
              {% endif %}
            {% endfor %}

            {% if paginate.next %}
              <a href="{{ paginate.next.url }}" class="pagination-item pagination-next">
                Next
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="9,18 15,12 9,6"></polyline>
                </svg>
              </a>
            {% else %}
              <span class="pagination-item pagination-next disabled">
                Next
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="9,18 15,12 9,6"></polyline>
                </svg>
              </span>
            {% endif %}
          </nav>
        </div>
      {% endif %}
    {% endpaginate %}
  </div>
</div>

<script>
  // Test if JavaScript is running at all
  console.log('🚀 JAVASCRIPT IS RUNNING! Collection view toggle script loaded');
  
  // Simple view toggle implementation
  function initViewToggle() {
    console.log('🔄 Starting view toggle initialization...');
    
    const viewToggleButtons = document.querySelector('.view-toggle-buttons');
    const collectionProducts = document.querySelector('.collection-products');
    
    if (!viewToggleButtons || !collectionProducts) {
      console.log('❌ View toggle elements not found');
      console.log('viewToggleButtons:', viewToggleButtons);
      console.log('collectionProducts:', collectionProducts);
      return;
    }
    
    console.log('✅ Found view toggle elements');
    
    const storageKey = 'collection-view-preference';
    const defaultView = viewToggleButtons.dataset.defaultView || 'grid';
    const savedView = localStorage.getItem(storageKey);
    const currentView = savedView || defaultView;
    
    console.log('📊 View settings:', { defaultView, savedView, currentView });
    
    // Set initial view
    setView(currentView);
    
    // Add click listeners to buttons
    viewToggleButtons.addEventListener('click', function(e) {
      const button = e.target.closest('.view-toggle-btn');
      if (!button) return;
      
      const view = button.dataset.view;
      console.log('🔄 User clicked:', view);
      
      setView(view);
      localStorage.setItem(storageKey, view);
    });
    
    function setView(view) {
      console.log('🎯 Setting view to:', view);
      
      // Update button states
      const buttons = viewToggleButtons.querySelectorAll('.view-toggle-btn');
      buttons.forEach(function(btn) {
        if (btn.dataset.view === view) {
          btn.classList.add('active');
          console.log('✅ Activated button:', btn.dataset.view);
        } else {
          btn.classList.remove('active');
          console.log('⚪ Deactivated button:', btn.dataset.view);
        }
      });
      
      // Update products container
      collectionProducts.setAttribute('data-view', view);
      console.log('📦 Products container data-view set to:', collectionProducts.getAttribute('data-view'));
      
      // Force browser to recalculate styles
      collectionProducts.style.display = 'none';
      collectionProducts.offsetHeight; // Trigger reflow
      collectionProducts.style.display = '';
      
      console.log('✨ View switch complete!');
    }
    
    console.log('🚀 View toggle initialized successfully!');
  }
  
  // Wishlist functionality
  function initWishlist() {
    console.log('💝 Initializing wishlist functionality...');
    
    const wishlistKey = 'product-wishlist';
    
    // Get wishlist from localStorage
    function getWishlist() {
      try {
        return JSON.parse(localStorage.getItem(wishlistKey)) || [];
      } catch (e) {
        return [];
      }
    }
    
    // Save wishlist to localStorage
    function saveWishlist(wishlist) {
      localStorage.setItem(wishlistKey, JSON.stringify(wishlist));
    }
    
    // Check if product is in wishlist
    function isInWishlist(productId) {
      return getWishlist().includes(String(productId));
    }
    
    // Toggle product in/out of wishlist
    function toggleWishlist(productId) {
      let wishlist = getWishlist();
      const productIdStr = String(productId);
      
      if (wishlist.includes(productIdStr)) {
        wishlist = wishlist.filter(id => id !== productIdStr);
        console.log('💔 Removed from wishlist:', productIdStr);
      } else {
        wishlist.push(productIdStr);
        console.log('💖 Added to wishlist:', productIdStr);
      }
      
      saveWishlist(wishlist);
      updateWishlistButtons();
      return !isInWishlist(productId);
    }
    
    // Update all wishlist button states
    function updateWishlistButtons() {
      const wishlistButtons = document.querySelectorAll('.product-card__wishlist, .product-card__wishlist-btn');
      
      wishlistButtons.forEach(button => {
        const productId = button.dataset.productId || button.closest('.product-card').dataset.productId;
        if (productId) {
          const inWishlist = isInWishlist(productId);
          button.classList.toggle('in-wishlist', inWishlist);
          
          // Update aria-label
          const addText = button.getAttribute('aria-label')?.includes('Add') ? 'Add to wishlist' : 'Add to wishlist';
          const removeText = 'Remove from wishlist';
          button.setAttribute('aria-label', inWishlist ? removeText : addText);
        }
      });
    }
    
    // Add click listeners to wishlist buttons
    document.addEventListener('click', function(e) {
      const wishlistButton = e.target.closest('.product-card__wishlist, .product-card__wishlist-btn');
      if (wishlistButton) {
        e.preventDefault();
        const productId = wishlistButton.dataset.productId || wishlistButton.closest('.product-card').dataset.productId;
        if (productId) {
          const isAdded = toggleWishlist(productId);
          
          // Optional: Show a toast notification
          const message = isAdded ? 'Added to wishlist' : 'Removed from wishlist';
          console.log('💝', message);
          
          // You can add a toast notification here if desired
          // showToast(message);
        }
      }
    });
    
    // Initialize wishlist button states
    updateWishlistButtons();
    
    console.log('💝 Wishlist functionality initialized!');
  }
  
  // Sort functionality
  function initSort() {
    console.log('🔄 Initializing sort functionality...');
    
    const sortDropdown = document.querySelector('#collection-sort');
    const collectionProducts = document.querySelector('.collection-products');
    const sortStorageKey = 'collection-sort-preference';
    
    if (!sortDropdown || !collectionProducts) {
      console.log('❌ Sort elements not found');
      return;
    }
    
    // Get saved sort preference or use default
    const savedSort = localStorage.getItem(sortStorageKey);
    const defaultSort = sortDropdown.dataset.defaultSort || 'manual';
    const currentSort = savedSort || defaultSort;
    
    console.log('📊 Sort settings:', { defaultSort, savedSort, currentSort });
    
    // Set initial sort value
    sortDropdown.value = currentSort;
    
    // Add change listener
    sortDropdown.addEventListener('change', function() {
      const sortValue = this.value;
      console.log('🔄 User selected sort:', sortValue);
      
      sortProducts(sortValue);
      localStorage.setItem(sortStorageKey, sortValue);
    });
    
    // Sort products function
    function sortProducts(sortBy) {
      console.log('🎯 Sorting products by:', sortBy);
      
      const productCards = Array.from(collectionProducts.querySelectorAll('.product-card'));
      
      if (productCards.length === 0) {
        console.log('❌ No products found to sort');
        return;
      }
      
      // Sort the product cards
      productCards.sort(function(a, b) {
        return compareProducts(a, b, sortBy);
      });
      
      // Remove existing products
      productCards.forEach(card => card.remove());
      
      // Add sorted products back
      const paginationElement = collectionProducts.querySelector('.collection-pagination');
      if (paginationElement) {
        // Insert before pagination
        productCards.forEach(card => {
          collectionProducts.insertBefore(card, paginationElement);
        });
      } else {
        // Append to end
        productCards.forEach(card => {
          collectionProducts.appendChild(card);
        });
      }
      
      console.log('✨ Products sorted successfully!');
    }
    
    // Compare function for different sort types
    function compareProducts(a, b, sortBy) {
      switch (sortBy) {
        case 'title-ascending':
          return getProductTitle(a).localeCompare(getProductTitle(b));
        
        case 'title-descending':
          return getProductTitle(b).localeCompare(getProductTitle(a));
        
        case 'price-ascending':
          return getProductPrice(a) - getProductPrice(b);
        
        case 'price-descending':
          return getProductPrice(b) - getProductPrice(a);
        
        case 'created-descending':
          return getProductDate(b) - getProductDate(a);
        
        case 'created-ascending':
          return getProductDate(a) - getProductDate(b);
        
        case 'best-selling':
          // For best-selling, we'll use a combination of factors
          // Since we don't have sales data, we'll use price as a proxy
          return getProductPrice(b) - getProductPrice(a);
        
        case 'manual':
        default:
          // Return original order (no sorting)
          return 0;
      }
    }
    
    // Helper functions to extract product data
    function getProductTitle(productCard) {
      const titleElement = productCard.querySelector('.product-card__title a');
      return titleElement ? titleElement.textContent.trim().toLowerCase() : '';
    }
    
    function getProductPrice(productCard) {
      const priceElement = productCard.querySelector('.product-card__price-regular');
      if (!priceElement) return 0;
      
      const priceText = priceElement.textContent.replace(/[^0-9.,]/g, '');
      return parseFloat(priceText.replace(',', '')) || 0;
    }
    
    function getProductDate(productCard) {
      // Since we don't have direct access to product creation date in the DOM,
      // we'll use the product ID as a proxy (higher ID = newer product)
      const productId = productCard.dataset.productId;
      return parseInt(productId) || 0;
    }
    
    console.log('🔄 Sort functionality initialized!');
  }
  
  // Initialize when ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
      initViewToggle();
      initWishlist();
      initSort();
    });
  } else {
    initViewToggle();
    initWishlist();
    initSort();
  }
  
  // Also try to initialize after a short delay to ensure all styles are loaded
  setTimeout(function() {
    initViewToggle();
    initWishlist();
    initSort();
  }, 500);
</script>

{% stylesheet %}
  .collection-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 40px 20px;
  }

  .collection-header {
    margin-bottom: 40px;
  }

  .breadcrumb {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    font-size: 14px;
    color: #666;
  }

  .breadcrumb-item {
    color: #666;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .breadcrumb-item:hover {
    color: #ff6b35;
  }

  .breadcrumb-item.current {
    color: #333;
    font-weight: 500;
  }

  .breadcrumb-separator {
    margin: 0 8px;
    color: #999;
  }

  .collection-header-main {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 20px;
  }

  /* Collection Controls */
  .collection-controls {
    display: flex;
    align-items: flex-start;
    gap: 24px;
    flex-wrap: wrap;
  }

  .collection-title-section {
    flex: 1;
  }

  .collection-title {
    font-size: 36px;
    font-weight: 700;
    color: #333;
    margin: 0 0 16px;
  }

  .collection-description {
    font-size: 16px;
    line-height: 1.6;
    color: #666;
    margin: 0;
  }

  /* View Toggle Styles */
  .view-toggle-section {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 8px;
  }

  .view-toggle-label {
    font-size: 14px;
    color: #666;
    font-weight: 500;
  }

  .view-toggle-buttons {
    display: flex;
    background: #f8f9fa;
    border-radius: 8px;
    padding: 4px;
    gap: 2px;
  }

  .view-toggle-btn {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 8px 12px;
    background: transparent;
    border: none;
    border-radius: 6px;
    color: #666;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  .view-toggle-btn:hover {
    background: rgba(255, 107, 53, 0.1);
    color: #ff6b35;
  }

  .view-toggle-btn.active {
    background: #ffffff;
    color: #333;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .view-toggle-btn svg {
    flex-shrink: 0;
  }

  /* Sort Dropdown Styles */
  .sort-section {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }

  .sort-label {
    font-size: 14px;
    color: #666;
    font-weight: 500;
  }

  .sort-dropdown-wrapper {
    position: relative;
    display: inline-block;
  }

  .sort-dropdown {
    appearance: none;
    background: #ffffff;
    border: 2px solid #e8e8e8;
    border-radius: 8px;
    padding: 8px 40px 8px 12px;
    font-size: 14px;
    font-weight: 500;
    color: #333;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 200px;
  }

  .sort-dropdown:hover {
    border-color: #ff6b35;
  }

  .sort-dropdown:focus {
    outline: none;
    border-color: #ff6b35;
    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
  }

  .sort-dropdown-icon {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #666;
    pointer-events: none;
    transition: transform 0.2s ease;
  }

  .sort-dropdown:focus + .sort-dropdown-icon {
    transform: translateY(-50%) rotate(180deg);
  }

  /* Collection Products Grid/List Styles */
  .collection-products {
    margin-bottom: 60px;
    transition: all 0.3s ease;
  }

  /* Grid View */
  .collection-products[data-view="grid"] {
    display: grid !important;
    grid-template-columns: repeat(var(--products-per-row-desktop, 4), 1fr) !important;
    gap: 30px !important;
  }
  


  /* List View */
  .collection-products[data-view="list"] {
    display: flex !important;
    flex-direction: column !important;
    gap: 20px !important;
  }
  


  /* Grid View Product Card */
  .collection-products[data-view="grid"] .product-card {
    position: relative;
    background: #ffffff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
  }

  .collection-products[data-view="grid"] .product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
  }

  /* List View Product Card */
  .collection-products[data-view="list"] .product-card {
    position: relative !important;
    background: #ffffff !important;
    border-radius: 12px !important;
    overflow: hidden !important;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08) !important;
    transition: all 0.3s ease !important;
    display: flex !important;
    flex-direction: row !important;
    align-items: center !important;
    min-height: 200px !important;

  }

  .collection-products[data-view="list"] .product-card:hover {
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12) !important;
  }

  .product-card__badge {
    position: absolute;
    top: 12px;
    left: 12px;
    background: #ff6b35;
    color: #ffffff;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
    z-index: 2;
  }

  .sale-badge {
    background: #e74c3c;
  }

  /* Grid View Image Wrapper */
  .collection-products[data-view="grid"] .product-card__image-wrapper {
    position: relative;
    background: #f8f9fa;
    aspect-ratio: 1;
    overflow: hidden;
  }

  /* List View Image Wrapper */
  .collection-products[data-view="list"] .product-card__image-wrapper {
    position: relative;
    background: #f8f9fa;
    width: 200px;
    height: 200px;
    flex-shrink: 0;
    overflow: hidden;
  }

  .product-card__image-link {
    display: block;
    width: 100%;
    height: 100%;
  }

  .product-card__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .product-card:hover .product-card__image {
    transform: scale(1.05);
  }

  .product-card__wishlist {
    position: absolute;
    top: 12px;
    right: 12px;
    width: 36px;
    height: 36px;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #666;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .product-card__wishlist:hover {
    background: rgba(255, 255, 255, 1);
    color: #ff6b35;
    transform: scale(1.1);
  }

  .product-card__wishlist.in-wishlist {
    background: #ff6b35;
    color: #ffffff;
  }

  .product-card__wishlist.in-wishlist svg {
    fill: currentColor;
  }

  .product-card__wishlist.in-wishlist:hover {
    background: #e55a2b;
    transform: scale(1.1);
  }

  /* Grid View Content */
  .collection-products[data-view="grid"] .product-card__content {
    padding: 20px;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  /* List View Content */
  .collection-products[data-view="list"] .product-card__content {
    padding: 24px;
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-height: 200px;
  }

  /* List View Additional Info (Hidden in Grid) */
  .collection-products[data-view="grid"] .product-card__list-info {
    display: none;
  }

  .collection-products[data-view="list"] .product-card__list-info {
    display: block;
    margin: 12px 0;
  }

  .product-card__description {
    font-size: 14px;
    color: #666;
    line-height: 1.5;
    margin: 0 0 8px;
  }

  .product-card__vendor {
    font-size: 12px;
    color: #999;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin: 0 0 8px;
  }

  .product-card__tags {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
    margin: 0;
  }

  .product-card__tag {
    display: inline-block;
    background: #f1f3f4;
    color: #5f6368;
    font-size: 11px;
    padding: 2px 6px;
    border-radius: 4px;
    font-weight: 500;
  }

  .product-card__title {
    margin: 0 0 12px;
    font-size: 16px;
    font-weight: 600;
    line-height: 1.4;
  }

  .product-card__title a {
    color: #333;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .product-card__title a:hover {
    color: #ff6b35;
  }

  .product-card__price {
    margin-bottom: 16px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .product-card__price-regular {
    font-size: 18px;
    font-weight: 700;
    color: #333;
  }

  .product-card__price-compare {
    font-size: 14px;
    color: #999;
    text-decoration: line-through;
  }

  .product-card__form {
    margin: 0;
  }

  /* Grid View Actions */
  .collection-products[data-view="grid"] .product-card__actions {
    margin-top: auto;
  }

  .collection-products[data-view="grid"] .product-card__wishlist-btn {
    display: none;
  }

  /* List View Actions */
  .collection-products[data-view="list"] .product-card__actions {
    display: flex;
    gap: 12px;
    margin-top: 16px;
  }

  .collection-products[data-view="list"] .product-card__form {
    flex: 1;
  }

  .product-card__add-to-cart {
    width: 100%;
    background: #333;
    color: #ffffff;
    border: none;
    padding: 12px 16px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
  }

  .product-card__add-to-cart:hover {
    background: #ff6b35;
    transform: translateY(-1px);
  }

  .product-card__add-to-cart.sold-out {
    background: #ccc;
    cursor: not-allowed;
  }

  .product-card__add-to-cart.sold-out:hover {
    background: #ccc;
    transform: none;
  }

  /* Wishlist Button (List View Only) */
  .product-card__wishlist-btn {
    background: #ffffff;
    color: #333;
    border: 2px solid #e1e5e9;
    padding: 12px 16px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    white-space: nowrap;
    min-width: 140px;
  }

  .product-card__wishlist-btn:hover {
    background: #f8f9fa;
    border-color: #ff6b35;
    color: #ff6b35;
  }

  .product-card__wishlist-btn.in-wishlist {
    background: #ff6b35;
    color: #ffffff;
    border-color: #ff6b35;
  }

  .product-card__wishlist-btn.in-wishlist svg {
    fill: currentColor;
  }

  .collection-pagination {
    grid-column: 1 / -1;
    display: flex;
    justify-content: center;
    margin-top: 40px;
  }

  /* Pagination Styling */
  .pagination-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    flex-wrap: wrap;
  }

  .pagination-item {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 44px;
    height: 44px;
    padding: 10px 12px;
    background: #ffffff;
    color: #333;
    text-decoration: none;
    border: 2px solid #e8e8e8;
    border-radius: 10px;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }

  .pagination-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 107, 53, 0.1), transparent);
    transition: left 0.5s;
  }

  .pagination-item:hover::before {
    left: 100%;
  }

  .pagination-item:hover {
    background: #ff6b35;
    color: #ffffff;
    border-color: #ff6b35;
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 8px 25px rgba(255, 107, 53, 0.4);
  }

  .pagination-item.current {
    background: linear-gradient(135deg, #333, #555);
    color: #ffffff;
    border-color: #333;
    cursor: default;
    box-shadow: 0 4px 15px rgba(51, 51, 51, 0.3);
  }

  .pagination-item.current:hover {
    background: linear-gradient(135deg, #333, #555);
    color: #ffffff;
    transform: none;
    box-shadow: 0 4px 15px rgba(51, 51, 51, 0.3);
  }

  .pagination-item.current::before {
    display: none;
  }

  .pagination-item.disabled {
    background: #f8f9fa;
    color: #adb5bd;
    border-color: #e9ecef;
    cursor: not-allowed;
    opacity: 0.6;
  }

  .pagination-item.disabled:hover {
    background: #f8f9fa;
    color: #adb5bd;
    transform: none;
    box-shadow: none;
  }

  .pagination-item.disabled::before {
    display: none;
  }

  .pagination-prev,
  .pagination-next {
    padding: 10px 16px;
    gap: 6px;
    font-weight: 700;
    letter-spacing: 0.5px;
  }

  .pagination-prev svg,
  .pagination-next svg {
    transition: transform 0.3s ease;
  }

  .pagination-prev:hover svg {
    transform: translateX(-2px);
  }

  .pagination-next:hover svg {
    transform: translateX(2px);
  }

  .pagination-number {
    min-width: 44px;
  }

  .pagination-item.gap {
    background: transparent;
    border: 2px solid transparent;
    color: #6c757d;
    cursor: default;
    font-weight: 400;
  }

  .pagination-item.gap:hover {
    background: transparent;
    color: #6c757d;
    transform: none;
    box-shadow: none;
  }

  .pagination-item.gap::before {
    display: none;
  }

  /* Mobile Responsive */
  @media (max-width: 1024px) {
    .collection-products[data-view="grid"] {
      grid-template-columns: repeat(var(--products-per-row-tablet, 3), 1fr);
      gap: 25px;
    }

    .collection-header-main {
      flex-direction: column;
      align-items: stretch;
      gap: 16px;
    }

    .collection-controls {
      flex-direction: column;
      align-items: stretch;
      gap: 16px;
    }

    .view-toggle-section {
      align-items: flex-start;
      flex-direction: row;
      justify-content: space-between;
    }

    .sort-section {
      align-items: stretch;
    }

    .sort-dropdown {
      min-width: 100%;
    }

    .collection-products[data-view="list"] .product-card__image-wrapper {
      width: 150px;
      height: 150px;
    }

    .collection-products[data-view="list"] .product-card__content {
      padding: 20px;
    }
  }

  @media (max-width: 768px) {
    .collection-page {
      padding: 20px 16px;
    }

    .collection-title {
      font-size: 28px;
    }

    .collection-products[data-view="grid"] {
      grid-template-columns: repeat(var(--products-per-row-mobile, 2), 1fr);
      gap: 20px;
    }

    .collection-products[data-view="grid"] .product-card__content {
      padding: 16px;
    }

    .collection-products[data-view="list"] .product-card {
      flex-direction: column;
      min-height: auto;
    }

    .collection-products[data-view="list"] .product-card__image-wrapper {
      width: 100%;
      height: 200px;
    }

    .collection-products[data-view="list"] .product-card__content {
      padding: 16px;
      min-height: auto;
    }

    .collection-products[data-view="list"] .product-card__actions {
      flex-direction: column;
      gap: 8px;
    }

    .product-card__quick-view {
      min-width: auto;
    }

    .breadcrumb {
      font-size: 12px;
    }

    .collection-controls {
      gap: 12px;
    }

    .view-toggle-section {
      flex-direction: column;
      align-items: flex-start;
      gap: 8px;
    }

    .sort-dropdown {
      font-size: 13px;
      min-width: 180px;
    }

    .collection-pagination {
      margin-top: 30px;
    }

    .pagination-wrapper {
      gap: 6px;
    }

    .pagination-item {
      min-width: 38px;
      height: 38px;
      padding: 8px 10px;
      font-size: 13px;
      border-radius: 8px;
    }

    .pagination-prev,
    .pagination-next {
      padding: 8px 12px;
      font-size: 12px;
    }

    .pagination-number {
      min-width: 38px;
    }
  }

  @media (max-width: 480px) {
    .collection-products[data-view="grid"] {
      grid-template-columns: 1fr;
      gap: 16px;
    }

    .collection-title {
      font-size: 24px;
    }

    .view-toggle-btn {
      padding: 6px 8px;
      font-size: 12px;
      gap: 4px;
    }

    .view-toggle-btn svg {
      width: 16px;
      height: 16px;
    }

    .collection-products[data-view="list"] .product-card__content {
      padding: 16px;
    }
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:general.collection",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.collection.settings.view_options.header"
    },
    {
      "type": "checkbox",
      "id": "enable_view_toggle",
      "label": "t:sections.collection.settings.enable_view_toggle.label",
      "info": "t:sections.collection.settings.enable_view_toggle.info",
      "default": true
    },
    {
      "type": "select",
      "id": "default_view",
      "label": "t:sections.collection.settings.default_view.label",
      "options": [
        {
          "value": "grid",
          "label": "t:sections.collection.settings.default_view.options.grid"
        },
        {
          "value": "list",
          "label": "t:sections.collection.settings.default_view.options.list"
        }
      ],
      "default": "grid"
    },
    {
      "type": "range",
      "id": "products_per_row_desktop",
      "label": "t:sections.collection.settings.products_per_row_desktop.label",
      "min": 2,
      "max": 5,
      "step": 1,
      "default": 4
    },
    {
      "type": "range",
      "id": "products_per_row_tablet",
      "label": "t:sections.collection.settings.products_per_row_tablet.label",
      "min": 2,
      "max": 4,
      "step": 1,
      "default": 3
    },
    {
      "type": "range",
      "id": "products_per_row_mobile",
      "label": "t:sections.collection.settings.products_per_row_mobile.label",
      "min": 1,
      "max": 3,
      "step": 1,
      "default": 2
    },
    {
      "type": "header",
      "content": "t:sections.collection.settings.sort_options.header"
    },
    {
      "type": "select",
      "id": "default_sort",
      "label": "t:sections.collection.settings.default_sort.label",
      "info": "t:sections.collection.settings.default_sort.info",
      "options": [
        {
          "value": "manual",
          "label": "t:sections.collection.settings.default_sort.options.featured"
        },
        {
          "value": "best-selling",
          "label": "t:sections.collection.settings.default_sort.options.best_selling"
        },
        {
          "value": "title-ascending",
          "label": "t:sections.collection.settings.default_sort.options.name_a_z"
        },
        {
          "value": "title-descending",
          "label": "t:sections.collection.settings.default_sort.options.name_z_a"
        },
        {
          "value": "price-ascending",
          "label": "t:sections.collection.settings.default_sort.options.price_low_high"
        },
        {
          "value": "price-descending",
          "label": "t:sections.collection.settings.default_sort.options.price_high_low"
        },
        {
          "value": "created-descending",
          "label": "t:sections.collection.settings.default_sort.options.date_new_old"
        },
        {
          "value": "created-ascending",
          "label": "t:sections.collection.settings.default_sort.options.date_old_new"
        }
      ],
      "default": "manual"
    },
    {
      "type": "checkbox",
      "id": "enable_sort_dropdown",
      "label": "t:sections.collection.settings.enable_sort_dropdown.label",
      "info": "t:sections.collection.settings.enable_sort_dropdown.info",
      "default": true
    }
  ]
}
{% endschema %}
